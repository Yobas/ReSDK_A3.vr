// ======================================================
// Copyright (c) 2017-2025 the ReSDK_A3 project
// sdk.relicta.ru
// ======================================================

// ============================================================================
// HPA* NAVIGATION SYSTEM
// ============================================================================
// –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è AI —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 3D –Ω–∞–≤–∏–≥–∞—Ü–∏–∏,
// –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–µ—Ç–∫–∏.
// 
// –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (10√ó10–º —Ä–µ–≥–∏–æ–Ω—ã) –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
// –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞—Ä—Ç –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.
// 
// ============================================================================
// –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢:
// ============================================================================
// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:
//    [getPosASL player, 50] call ai_nav_quickInit;
//
// 2. –ü–æ–∏—Å–∫ –ø—É—Ç–∏:
//    private _path = [getPosASL player, _targetPos] call ai_nav_findPath;
//
// 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π:
//    [getPosASL player, _targetPos] call ai_nav_testPath;
//
// 4. –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:
//    call ai_nav_getStats;
//
// ============================================================================
// –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø:
// ============================================================================
// üü¢ –ó–µ–ª–µ–Ω—ã–µ —Å—Ñ–µ—Ä—ã    - —É–∑–ª—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
// üü° –ñ–µ–ª—Ç—ã–µ –ª–∏–Ω–∏–∏     - –≥—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏–æ–Ω–æ–≤
// üîµ –ì–æ–ª—É–±—ã–µ –ª–∏–Ω–∏–∏    - —Å–≤—è–∑–∏ –≤–Ω—É—Ç—Ä–∏ —Ä–µ–≥–∏–æ–Ω–∞
// üî¥ –ö—Ä–∞—Å–Ω—ã–µ –ª–∏–Ω–∏–∏    - –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏ –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏
// üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ –ª–∏–Ω–∏–∏ - –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å
// ============================================================================

// ============================================================================
// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// ============================================================================
#define AI_NAV_DEBUG true
//#define AI_NAV_DEBUG_DRAW true

#define AI_ENABLE_DEBUG_LOG

//–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª—É—á–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π
//#define AI_EXPERIMENTAL_NODE_HOLE_FIX

//–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à spatial grid –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–Ω–∞ —Ç–µ—Å—Ç–∞—Ö –Ω–µ –¥–∞–≤–∞–ª–æ –ø—Ä–∏—Ä–æ—Å—Ç–∞)
//#define AI_USE_CACHE_SPATIAL_GRID

// –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
ai_nav_regions = createHashMap;      // regionKey -> region data
ai_nav_nodes = createHashMap;        // nodeId -> node data  
ai_nav_adjacency = createHashMap;    // nodeId -> [[neighborId, cost], ...]

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏
ai_nav_regionSize = 10;              // –†–∞–∑–º–µ—Ä —Ä–µ–≥–∏–æ–Ω–∞ 10√ó10–º
ai_nav_gridStep = 1;                 // –®–∞–≥ —Å–µ—Ç–∫–∏ 1–º
ai_nav_maxSlope = 45;                // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª —Å–∫–ª–æ–Ω–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
ai_nav_raycastHeight = 300;          // –í—ã—Å–æ—Ç–∞ –Ω–∞—á–∞–ª–∞ raycast
ai_nav_minDistZ = 0.7;				// –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ Z –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —É–∑–ª–æ–≤ –ø–æ z

ai_nav_nodeIdCounter = 0;

#ifdef AI_NAV_DEBUG
	#define ai_debug_decl(linedecl) linedecl
#else
	#define ai_debug_decl(linedecl) 
#endif


// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —É–∑–ª–∞
ai_nav_generateNodeId = {
	ai_nav_nodeIdCounter = ai_nav_nodeIdCounter + 1;
	ai_nav_nodeIdCounter
};

ai_nav_getSlopeAngleVec = {
	params ["_pos1","_pos2"];
	private _dir = _pos2 vectorDiff _pos1;
	private _dirNorm = vectorNormalized _dir;

	// –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä (–ø—Ä–æ–µ–∫—Ü–∏—è –Ω–∞ XY –ø–ª–æ—Å–∫–æ—Å—Ç—å)
	private _horDir = [_dirNorm select 0, _dirNorm select 1, 0];
	private _horDirNorm = vectorNormalized _horDir;

	// –£–≥–æ–ª –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ —Å–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
	private _dotProduct = _dirNorm vectorDotProduct _horDirNorm;
	private _slopeAngle = acos _dotProduct; // –í –≥—Ä–∞–¥—É—Å–∞—Ö
	_slopeAngle
};

// –ë–´–°–¢–†–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–ª–æ–Ω–∞ (–±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
ai_nav_checkSlopeFast = {
	params ["_pos1", "_pos2", "_dist", "_maxSlope"];
	
	// –í—ã—á–∏—Å–ª—è–µ–º deltaZ
	private _deltaZ = abs((_pos2 select 2) - (_pos1 select 2));
	
	// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ Z –±–æ–ª—å—à–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç distance
	// tan(45¬∞) = 1.0, tan(60¬∞) = 1.732, tan(75¬∞) = 3.732
	private _slopeTan = tan _maxSlope;
	
	// –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ)
	// –î–ª—è –º–∞–ª—ã—Ö —É–≥–ª–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å _dist –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
	if (_deltaZ / _dist > _slopeTan) exitWith {false};
	
	true
};

ai_nav_sortBy = {
	params ["_list","_algorithm",["_modeIsAscend",true]];

	private _cnt = 0;
	private _inputArray = _list apply 
	{
		_cnt = _cnt + 1; 
		[_x call _algorithm, _cnt, _x]
	};

	_inputArray sort _modeIsAscend;
	_inputArray apply {_x select 2}
	
};

// ============================================================================
// PRIORITY QUEUE (MIN-HEAP) –¥–ª—è A*
// ============================================================================
// –ë–∏–Ω–∞—Ä–Ω–∞—è –∫—É—á–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º fScore
// –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –º–∞—Å—Å–∏–≤ [nodeId, fScore], –≥–¥–µ –∏–Ω–¥–µ–∫—Å 0 - –º–∏–Ω–∏–º—É–º
// ============================================================================

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ –∫—É—á–∏ –≤–≤–µ—Ä—Ö (–ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏)
ai_nav_heapifyUp = {
	params ["_heap", "_index"];
	
	while {_index > 0} do {
		private _parentIdx = floor((_index - 1) / 2);
		private _current = _heap select _index;
		private _parent = _heap select _parentIdx;
		
		// –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω - –≤—Å—ë –æ–∫
		if ((_parent select 1) <= (_current select 1)) exitWith {};
		
		// –ò–Ω–∞—á–µ –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
		_heap set [_index, _parent];
		_heap set [_parentIdx, _current];
		_index = _parentIdx;
	};
};

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ –∫—É—á–∏ –≤–Ω–∏–∑ (–ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—Ä–Ω—è)
ai_nav_heapifyDown = {
	params ["_heap", "_index"];
	private _size = count _heap;
	
	while {true} do {
		private _leftIdx = 2 * _index + 1;
		private _rightIdx = 2 * _index + 2;
		private _smallest = _index;
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–µ–≤–æ–≥–æ –ø–æ—Ç–æ–º–∫–∞
		if (_leftIdx < _size) then {
			if (((_heap select _leftIdx) select 1) < ((_heap select _smallest) select 1)) then {
				_smallest = _leftIdx;
			};
		};
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–æ–≥–æ –ø–æ—Ç–æ–º–∫–∞
		if (_rightIdx < _size) then {
			if (((_heap select _rightIdx) select 1) < ((_heap select _smallest) select 1)) then {
				_smallest = _rightIdx;
			};
		};
		
		// –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–∏–º–µ–Ω—å—à–∏–π - –≤—Å—ë –æ–∫
		if (_smallest == _index) exitWith {};
		
		// –ò–Ω–∞—á–µ –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
		private _temp = _heap select _index;
		_heap set [_index, _heap select _smallest];
		_heap set [_smallest, _temp];
		_index = _smallest;
	};
};

// –í—Å—Ç–∞–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫—É—á—É
ai_nav_heapInsert = {
	params ["_heap", "_nodeId", "_fScore"];
	
	_heap pushBack [_nodeId, _fScore];
	[_heap, (count _heap) - 1] call ai_nav_heapifyUp;
};

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
ai_nav_heapExtractMin = {
	params ["_heap"];
	
	private _size = count _heap;
	if (_size == 0) exitWith {[-1, 999999]};
	
	private _min = _heap select 0;
	
	if (_size == 1) then {
		_heap resize 0;
	} else {
		_heap set [0, _heap select (_size - 1)];
		_heap resize (_size - 1);
		[_heap, 0] call ai_nav_heapifyDown;
	};
	
	_min
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ fScore —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫—É—á–µ
ai_nav_heapUpdateKey = {
	params ["_heap", "_nodeId", "_newFScore"];
	
	// –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ (O(n), –Ω–æ —Ä–µ–¥–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
	private _index = -1;
	{
		if ((_x select 0) == _nodeId) exitWith {
			_index = _forEachIndex;
		};
	} forEach _heap;
	
	if (_index == -1) exitWith {false};
	
	private _oldFScore = (_heap select _index) select 1;
	_heap set [_index, [_nodeId, _newFScore]];
	
	// –ï—Å–ª–∏ —É–º–µ–Ω—å—à–∏–ª–∏ - heapifyUp, –µ—Å–ª–∏ —É–≤–µ–ª–∏—á–∏–ª–∏ - heapifyDown
	if (_newFScore < _oldFScore) then {
		[_heap, _index] call ai_nav_heapifyUp;
	} else {
		[_heap, _index] call ai_nav_heapifyDown;
	};
	
	true
};

ai_nav_generateRegionNodes = {
	params ["_pos", ["_autoSave", true]];
	
	// –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Ä–µ–≥–∏–æ–Ω–∞
	private _regionKey = _pos call ai_nav_getRegionKey;
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–≥–∏–æ–Ω —É–∂–µ
	if (_regionKey in ai_nav_regions) exitWith {
		ai_debug_decl(["Region %1 already exists, skipping generation" arg _regionKey] call ai_debugLog);
		_regionKey
	};
	
	private _regionStartX = floor((_pos select 0) / ai_nav_regionSize) * ai_nav_regionSize;
	private _regionStartY = floor((_pos select 1) / ai_nav_regionSize) * ai_nav_regionSize;
	private _regionEndX = _regionStartX + ai_nav_regionSize - ai_nav_gridStep; // –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É
	private _regionEndY = _regionStartY + ai_nav_regionSize - ai_nav_gridStep; // –ò—Å–∫–ª—é—á–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
	private _queryPos = [];
	
	ai_debug_decl(private _t = tickTime;)
	for "_xp" from _regionStartX to _regionEndX step ai_nav_gridStep do {
		for "_yp" from _regionStartY to _regionEndY step ai_nav_gridStep do {
			_queryPos pushBack [
				[_xp,_yp,ai_nav_raycastHeight],
				[_xp,_yp,0],
				objNull,
				objNull,
				true,
				-1,
				"ROADWAY", //–∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫–∏ —Å–º–æ–≥—É—Ç —Ö–æ–¥–∏—Ç—å –ø–æ –ª—é–±—ã–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—è–º –∏ –º–æ–±—ã —Å–º–æ–≥—É—Ç
				"ROADWAY",
				false //ret unique
			];

			#ifdef AI_EXPERIMENTAL_NODE_HOLE_FIX
			private _offsetPoints = [
				[0.2,0,0],    // –°–º–µ—â–µ–Ω–∏—è –Ω–∞ 20—Å–º
				[-0.2,0,0],
				[0,0.2,0],
				[0,-0.2,0]
			];
			
			{
				_queryPos pushBack [
					[_xp,_yp,ai_nav_raycastHeight] vectoradd _x,
					[_xp,_yp,0] vectoradd _x,
					objNull,
					objNull,
					true,
					-1,
					"ROADWAY",
					"ROADWAY",
					false
				];
			} foreach _offsetPoints;
			#endif
		};
	};

	private _nodes = [];

	// === SPATIAL GRID OPTIMIZATION ===
	// –î–µ–ª–∏–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–∞ —è—á–µ–π–∫–∏ 2√ó2–º
	private _maxConnectionDist = ai_nav_gridStep * 2; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–≤—è–∑–∏ (–ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏)
	private _gridSize = _maxConnectionDist; // 2m
	private _spatialGrid = createHashMap;

	private _cellOffsets = [
		[-1,-1],[-1,0],[-1,1],
		[0,-1], [0,0], [0,1],
		[1,-1], [1,0], [1,1]
	];
	
	//–ø–æ—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
	private _hits = lineIntersectsSurfaces [_queryPos];

	private _connectionData = [];
	_queryPos = [];
	
	#ifdef AI_EXPERIMENTAL_NODE_HOLE_FIX
	private _filteredHits = []; private _otherside = [];
	{
		if (_foreachindex %5 == 0) then {
			//_otherside append (_hits select [_foreachindex + 1,4]);
			private _cur = _x;
			private _others = (_hits select [_foreachindex + 1,4]);
			private _otherflat = []; {_otherflat append _x} foreach _others;
			
			[_otherflat,{_x select 0 select 2},false] call ai_nav_sortBy;
			// {_cur append _x} foreach _others;
			//_cur = [_cur,{_x select 0 select 2},false] call ai_nav_sortBy;
			//_filteredHits pushBack _cur;

			// –£–ú–ù–û–ï –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –î–´–† –≤ _cur —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
			private _patchedCur = [];
			private _prevZ = 999999;
			private _sizecheck = 0.7;
			
			{
				private _curPos = _x select 0;
				private _curZ = _curPos select 2;
				
				// –ï—Å–ª–∏ –µ—Å—Ç—å –¥—ã—Ä–∞ –º–µ–∂–¥—É –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏ —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–æ–π
				if ((_prevZ-_curZ) > _sizecheck) then {
					
					// –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ —ç—Ç—É –¥—ã—Ä—É
					private _foundInGap = [];
					private _remIndexLast = -1;
					private _curZOffset = _curZ + _sizecheck;
					{
						private _otherPos = _x select 0;
						private _otherZ = _otherPos select 2;
						//! –†–∞–±–æ—Ç–∞–µ—Ç –∫—Ä–∏–≤–æ. –Ω–∞–¥–æ –¥–æ–ª–≥–æ –∏ —É–ø–æ—Ä–Ω–æ —Ç–µ—Å—Ç–∏—Ç—å –∏ –∏—Å–∫–∞—Ç—å –ø–æ–¥—Ö–æ–¥—ã
						if ( _otherZ < _curZOffset) exitWith {
							
							_foundInGap = _otherflat select (_forEachIndex-1);
                			_remIndexLast = _forEachIndex-1;
						};
					} foreach _otherflat;
					// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –≤ –¥—ã—Ä—É
					if (_remIndexLast != -1) then {
            		_patchedCur insert [(count _patchedCur)-1-1,[_foundInGap]];
					_otherflat deleteRange [0,_remIndexLast+1];
					};
				};
				
				_patchedCur pushBack _x; // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–æ—á–∫—É
				_prevZ = _curZ;
			} foreach _cur;
			
			_filteredHits pushBack _patchedCur; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–ø–∞—Ç—á–µ–Ω–Ω—ã–π _cur
		};
	} foreach _hits; //–≤—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –ø—Ä–æ–ø—É—Å–∫–æ–º 4 —Ç–µ—Å—Ç —Ç–æ—á–µ–∫
	_hits = _filteredHits;
	#endif

	{
		private _prevpos = [0,0,99999];
		{
			_x params ["_pos","_norm","_obj"];
			//–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º—ã–π –≤–µ—Ä—Ö–Ω–∏–π —Å–ª–æ–π (—ç—Ç–æ –∫—Ä—ã—à–∞ –ø–æ—Ç–æ–ª–∫–∞) 
			//–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–µ—Ç –ø–µ—Ä—Ñ –±—É—Å—Ç –Ω–∞ 49% –º–µ–Ω—å—à–µ —Ç–æ—á–µ–∫, –∏ –æ–±—â–∏–π –ø–µ—Ä—Ñ –≤—ã—à–µ –Ω–∞ 30% –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —á—Ç–æ –ø–æ—Ç–æ–ª–æ–∫ —Ö–æ–¥–∏–±–µ–ª—å–Ω—ã–π
			if (_forEachIndex == 0) then {
				private _hitUp = lineIntersectsSurfaces [
					_pos,
					_pos vectoradd vec3(0,0,ai_nav_raycastHeight),
					objNull,
					objNull,
					true,
					1,
					"VIEW",
					"GEOM"
				];
				if (count _hitUp == 0) then {
					continue;
				};
			};
			
			//–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			if (isNullReference(_obj)) then {continue};

			//–µ—Å–ª–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			if (((_prevpos select 2)-(_pos select 2)) < ai_nav_minDistZ) then {
				continue
			};

			// === –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –°—Ç—Ä–æ–∏–º —Å–≤—è–∑–∏ –°–†–ê–ó–£ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É–∑–ª–∞ ===
			private _currentIdx = count _nodes;
			_pos params ["_px", "_py", "_pz"];
			private _gridX = floor(_px / _gridSize);
			private _gridY = floor(_py / _gridSize);
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ —Å –£–ñ–ï –î–û–ë–ê–í–õ–ï–ù–ù–´–ú–ò —É–∑–ª–∞–º–∏ –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–π–∫–∞—Ö
			private _neighborsToCheck = []; // –∫–µ—à —É–∑–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

			{
				private _checkKey = str [_gridX + (_x select 0), _gridY + (_x select 1)];
				private _cellNodes = _spatialGrid getOrDefault [_checkKey, []];
				_neighborsToCheck append _cellNodes; // —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–∑–ª—ã –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤
			} forEach _cellOffsets;

			// –¢–µ–ø–µ—Ä—å –û–î–ò–ù forEach –≤–º–µ—Å—Ç–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö
			_doExit = false;
			{
				//private _checkKey = str [_gridX + (_x select 0), _gridY + (_x select 1)];
				//private _cellNodes = _spatialGrid getOrDefault [_checkKey, []];
				
				//{
					_x params ["_neighborIdx", "_neighborNode"];
					
					private _dist = _pos distance _neighborNode;
					
					if (_dist <= _maxConnectionDist) then {
						private _deltaZ = abs((_pz) - (_neighborNode select 2));
						if (_deltaZ > 1) then {_doExit = true; continue};
						
						if !([_pos, _neighborNode, _dist, ai_nav_maxSlope] call ai_nav_checkSlopeFast) then {_doExit = true; continue};
						
						_queryPos pushBack [
							_pos vectoradd vec3(0,0,0.4),
							_neighborNode vectoradd vec3(0,0,0.4),
							objNull, objNull, true, 1, "VIEW", "GEOM"
						];
						
						_connectionData pushBack [_pos, _neighborNode, _dist];
					};
				//} forEach _cellNodes;
			} forEach _neighborsToCheck;
			//if (_doExit) then {continue};
			
			// –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º —É–∑–µ–ª –≤ –º–∞—Å—Å–∏–≤ –∏ spatial grid
			_nodes pushBack _pos;
			
			#ifdef AI_NAV_DEBUG_DRAW
				[_pos,[0,1,0],3,true] call ai_nav_debug_createObj;
			#endif
			
			// –î–æ–±–∞–≤–ª—è–µ–º —É–∑–µ–ª –≤ spatial grid –¥–ª—è –±—É–¥—É—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
			private _gridKey = str [_gridX, _gridY];
			if (!(_gridKey in _spatialGrid)) then {
				_spatialGrid set [_gridKey, []];
			};
			(_spatialGrid get _gridKey) pushBack [_currentIdx, _pos];
			
			_prevpos = _pos;

		} foreach _x;
	} foreach _hits;
	ai_debug_decl(["    generateRegionNodes time %1ms" arg ((tickTime - _t)*1000)toFixed 6] call ai_debugLog);

	#ifdef AI_NAV_DEBUG_DRAW
		ai_debug_loopDrawObjs = [];
		//debug draw region
		private _height =( _pos select 2)-3;
		private _corner1 = asltoatl[_regionStartX, _regionStartY, _height];
		private _corner2 = asltoatl[_regionEndX, _regionStartY, _height];
		private _corner3 = asltoatl[_regionEndX, _regionEndY, _height];
		private _corner4 = asltoatl[_regionStartX, _regionEndY, _height];
		
		// –†–∏—Å—É–µ–º 4 –ª–∏–Ω–∏–∏ –≥—Ä–∞–Ω–∏—Ü —Ä–µ–≥–∏–æ–Ω–∞
		private _loopRegion1 = struct_newp(LoopedObjectFunction,ai_nav_debug_drawNode arg [_corner1 arg _corner2 arg [1 arg 1 arg 0 arg 1] arg 20] arg null arg ai_debug_objs select 0);
		private _loopRegion2 = struct_newp(LoopedObjectFunction,ai_nav_debug_drawNode arg [_corner2 arg _corner3 arg [1 arg 1 arg 0 arg 1] arg 20] arg null arg ai_debug_objs select 0);
		private _loopRegion3 = struct_newp(LoopedObjectFunction,ai_nav_debug_drawNode arg [_corner3 arg _corner4 arg [1 arg 1 arg 0 arg 1] arg 20] arg null arg ai_debug_objs select 0);
		private _loopRegion4 = struct_newp(LoopedObjectFunction,ai_nav_debug_drawNode arg [_corner4 arg _corner1 arg [1 arg 1 arg 0 arg 1] arg 20] arg null arg ai_debug_objs select 0);
		
		ai_debug_loopDrawObjs pushback _loopRegion1;
		ai_debug_loopDrawObjs pushback _loopRegion2;
		ai_debug_loopDrawObjs pushback _loopRegion3;
		ai_debug_loopDrawObjs pushback _loopRegion4;
		
		{
			//! –æ—Ç–∫–ª—é—á–µ–Ω–æ
			//private _loop = struct_newp(LoopedObjectFunction,ai_nav_debug_drawNode arg [asltoatl _x arg asltoatl _x vectoradd vec3(0,0,10) arg null arg 15] arg null arg ai_debug_objs select 0);
			//ai_debug_loopDrawObjs pushback _loop;
		} foreach _nodes;
	#endif

	//–ø–æ—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–µ–π
	ai_debug_decl(private _tEdges = tickTime;)

	private _edgesList = [];
	//_queryPos = [];	

	ai_debug_decl([
		"    Spatial grid: %1 cells, %2 nodes" arg 
		count _spatialGrid arg 
		count _nodes
	] call ai_debugLog;)
	
	ai_debug_decl([
		"    Checked pairs: %1 (total candidates: %2)" arg 
		count _connectionData arg
		(count _nodes * (count _nodes - 1) / 2)
	] call ai_debugLog;)
	_hits = lineIntersectsSurfaces [_queryPos];
	
	{
		if (count _x == 0) then {
			(_connectionData select _forEachIndex) params ["_currentNode","_neighborNode","_dist"];
			_edgesList pushBack ([_currentNode, _neighborNode, _dist]);

			#ifdef AI_NAV_DEBUG_DRAW
				
				private _loopEdge = struct_newp(LoopedObjectFunction,ai_nav_debug_drawNode arg [
					asltoatl _currentNode vectoradd vec3(0,0,0.15) arg 
					asltoatl _neighborNode vectoradd vec3(0.1,0,0.15) arg 
					[0 arg 0.5 arg 1 arg 0.8] arg 
					15
				] arg null arg ai_debug_objs select 0);
				ai_debug_loopDrawObjs pushback _loopEdge;
			#endif
		};
	} foreach _hits;
	
	ai_debug_decl(["    generateRegionEdges time %1ms, edges count: %2" arg ((tickTime - _tEdges)*1000)toFixed 6 arg count _edgesList] call ai_debugLog);
	
	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–≥–∏–æ–Ω, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
	if (_autoSave) then {
		[_regionKey, _nodes, _edgesList] call ai_nav_saveRegion;
	
		#ifdef AI_USE_CACHE_SPATIAL_GRID
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º spatial grid –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
			private _regionData = ai_nav_regions get _regionKey;
			_regionData set ["spatialGrid", _spatialGrid];
		#endif
	};
	
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á —Ä–µ–≥–∏–æ–Ω–∞
	_regionKey
};

// –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π —É–∑–µ–ª –∫ –ø–æ–∑–∏—Ü–∏–∏
ai_nav_findNearestNode_old = {
	params ["_pos", ["_maxDistance", 50]];
	
	private _regionKey = _pos call ai_nav_getRegionKey;
	private _regionData = ai_nav_regions get _regionKey;
	
	// –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—â–µ–º –≤ –±–ª–∏–∂–∞–π—à–∏—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö
	if (isNil "_regionData") exitWith {
		private _bestNode = -1;
		private _bestDist = 999999;
		
		{
			private _nodeData = _y;
			private _nodePos = _nodeData get "pos";
			private _dist = _pos distance _nodePos;
			
			if (_dist < _bestDist && _dist <= _maxDistance) then {
				_bestDist = _dist;
				_bestNode = _x;
			};
		} forEach ai_nav_nodes;
		
		if (_bestNode == -1) exitWith {-1};
		_bestNode
	};
	
	// –ò—â–µ–º –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–≥–∏–æ–Ω–µ
	private _nodeIds = _regionData get "nodes";
	private _bestNode = -1;
	private _bestDist = 999999;
	
	{
		private _nodeId = _x;
		private _nodeData = ai_nav_nodes get _nodeId;
		private _nodePos = _nodeData get "pos";
		private _dist = _pos distance _nodePos;
		
		if (_dist < _bestDist) then {
			_bestDist = _dist;
			_bestNode = _nodeId;
		};
	} forEach _nodeIds;
	
	if (_bestDist > _maxDistance) then {
		-1
	} else {
		_bestNode
	}
};

ai_nav_internal_list_regionOffsets = [
	[0,1], [0,-1], [1,0], [-1,0], [1,1], [-1,1], [1,-1], [-1,-1]
];

//—É—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —É–∑–ª–∞ 21.3x –±—ã—Å—Ç—Ä–µ–µ —á–µ–º ai_nav_findNearestNode_old
ai_nav_findNearestNode = {
	params ["_pos", ["_maxDistance", 50]];
	
	private _regionKey = _pos call ai_nav_getRegionKey;
	private _regionData = ai_nav_regions get _regionKey;
	
	private _bestNode = -1;
	private _bestDist = 999999;
	
	// –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ä–µ–≥–∏–æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–µ–≥–æ
	if (!isNil "_regionData") then {
		private _nodeIds = _regionData get "nodes";
		
		{
			private _nodeData = ai_nav_nodes get _x;
			private _nodePos = _nodeData get "pos";
			private _dist = _pos distance _nodePos;
			
			if (_dist < _bestDist && {_dist <= _maxDistance}) then {
				_bestDist = _dist;
				_bestNode = _x;
				if (_dist < 0.5) then {break};
			};
		} forEach _nodeIds;
		
	};
	// –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –±–ª–∏–∑–∫–∏–π —É–∑–µ–ª –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–≥–∏–æ–Ω–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
	if (_bestNode != -1 && {_bestDist < 0.5}) exitWith {_bestNode};
	
	// –ò—â–µ–º –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö 8 —Ä–µ–≥–∏–æ–Ω–∞—Ö –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–±–æ—Ä–∞ –≤—Å–µ—Ö —É–∑–ª–æ–≤
	_regionKey splitString "_" params ["_rx", "_ry"];
	_rx = parseNumber _rx;
	_ry = parseNumber _ry;
	private _regionOffsetList = ai_nav_internal_list_regionOffsets;
	private _doReturn = false;
	{
		private _neighborKey = format ["%1_%2", _rx + (_x select 0), _ry + (_x select 1)];
		private _neighborData = ai_nav_regions get _neighborKey;
			
		if (!isNil "_neighborData") then {
			private _nodeIds = _neighborData get "nodes";
			
			{
				private _nodeData = ai_nav_nodes get _x;
				private _nodePos = _nodeData get "pos";
				private _dist = _pos distance _nodePos;
				
				if (_dist < _bestDist && {_dist <= _maxDistance}) then {
					_bestDist = _dist;
					_bestNode = _x;
					if (_dist < 0.5) then {
						_doReturn = true;
						break;
					};
				};
			} forEach _nodeIds;
			if (_doReturn) exitWith {break};
		};
	} foreach _regionOffsetList;
	
	_bestNode
};


// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Ç—å –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π
ai_nav_reconstructPath = {
	params ["_cameFrom", "_current"];
	
	private _path = [_current];
	
	while {_current in _cameFrom} do {
		_current = _cameFrom get _current;
		_path pushBack _current;
	};
	
	reverse _path;
	_path
};

// –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ø—Ä—è–º–æ–π)
ai_nav_heuristic = {
	params ["_nodeId1", "_nodeId2"];
	
	private _pos1 = (ai_nav_nodes get _nodeId1) get "pos";
	private _pos2 = (ai_nav_nodes get _nodeId2) get "pos";
	//?–º–æ–∂–Ω–æ –ø–æ—Ç–æ–º —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ —á–µ–º –¥–∞–ª—å—à–µ –∏–¥—Ç–∏ –¥–æ —Ü–µ–ª–∏ —Ç–µ–º –≤—ã—à–µ –∫–æ—ç—Ñ (–±—ã—Å—Ç—Ä–µ–µ –ø–æ—Å—á–∏—Ç–∞–µ—Ç—Å—è)
	(_pos1 distance _pos2) * 1.3 //—Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –≤ ~10 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ
};

// –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–∑–∏—Ü–∏–µ–π –≤–º–µ—Å—Ç–æ ID —É–∑–ª–∞
ai_nav_heuristicPos = {
	params ["_nodeId", "_targetPos"];
	
	private _nodePos = (ai_nav_nodes get _nodeId) get "pos";
	(_nodePos distance _targetPos) * 1.3 //—Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
};

// –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å–µ–¥–µ–π —É–∑–ª–∞
ai_nav_getNeighbors = {
	params ["_nodeId"];
	
	private _neighbors = ai_nav_adjacency getOrDefault [_nodeId, []];
	_neighbors
};

// A* –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —É–∑–ª–∞–º–∏ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô)
ai_nav_findPathNodes = {
	params ["_startNodeId", "_goalNodeId"];
	FHEADER;
	
	if (_startNodeId == -1 || _goalNodeId == -1) exitWith {
		ai_debug_decl(["Invalid node IDs: start=%1, goal=%2" arg _startNodeId arg _goalNodeId] call ai_debugLog);
		[]
	};
	
	ai_debug_decl(private _tStart = tickTime;)
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
	private _openSet = [_startNodeId];
	private _closedSet = createHashMap; // ‚Üê –ö–†–ò–¢–ò–ß–ù–û: –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
	private _cameFrom = createHashMap;
	
	private _gScore = createHashMap;
	_gScore set [_startNodeId, 0];
	
	private _fScore = createHashMap;
	_fScore set [_startNodeId, [_startNodeId, _goalNodeId] call ai_nav_heuristic];
	
	private _iterations = 0;
	private _maxIterations = 10000;
	
	while {count _openSet > 0 && _iterations < _maxIterations} do {
		_iterations = _iterations + 1;
		
		// –ù–∞–π—Ç–∏ —É–∑–µ–ª —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º fScore (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
		private _minIdx = 0;
		private _current = _openSet select 0;
		private _minF = _fScore getOrDefault [_current, 999999];
		
		for "_i" from 1 to (count _openSet - 1) do {
			private _nodeId = _openSet select _i;
			private _f = _fScore getOrDefault [_nodeId, 999999];
			if (_f < _minF) then {
				_minF = _f;
				_current = _nodeId;
				_minIdx = _i;
			};
		};
		
		// –î–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏
		if (_current == _goalNodeId) exitWith {
			private _path = [_cameFrom, _current] call ai_nav_reconstructPath;
			RETURN(_path);
		};
		
		// –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–∑ openSet –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ closedSet
		_openSet deleteAt _minIdx; // ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞!
		_closedSet set [_current, true]; // ‚Üê –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–π
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–µ–π
		private _neighbors = [_current] call ai_nav_getNeighbors;
		
		{
			_x params ["_neighborId", "_cost"];
			
			// ‚Üê –ü–†–û–ü–£–°–ö–ê–ï–ú –£–ñ–ï –ü–û–°–ï–©–ï–ù–ù–´–ï –£–ó–õ–´!
			if (_neighborId in _closedSet) then {continue};
			
			private _tentativeGScore = (_gScore getOrDefault [_current, 999999]) + _cost;
			
			if (_tentativeGScore < (_gScore getOrDefault [_neighborId, 999999])) then {
				_cameFrom set [_neighborId, _current];
				_gScore set [_neighborId, _tentativeGScore];
				_fScore set [_neighborId, _tentativeGScore + ([_neighborId, _goalNodeId] call ai_nav_heuristic)];
				
				if (!(_neighborId in _openSet)) then {
					_openSet pushBack _neighborId;
				};
			};
		} forEach _neighbors;
	};
	
	ai_debug_decl([
		"Path not found after %1 iterations (max: %2)" arg 
		_iterations arg 
		_maxIterations
	] call ai_debugLog);
	
	[]
};

// –ù–∞–π—Ç–∏ –ø—É—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–∑–∏—Ü–∏—è–º–∏
ai_nav_findPath = {
	params ["_startPos", "_endPos",["_optimize",true]];
	
	ai_debug_decl(["Finding path from %1 to %2" arg _startPos arg _endPos] call ai_debugLog);
	
	// –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ —É–∑–ª—ã
	private _startNode = [_startPos] call ai_nav_findNearestNode;
	private _endNode = [_endPos] call ai_nav_findNearestNode;
	
	if (_startNode == -1) exitWith {
		ai_debug_decl(["No start node found near %1" arg _startPos] call ai_debugLog);
		[]
	};
	
	if (_endNode == -1) exitWith {
		ai_debug_decl(["No end node found near %1" arg _endPos] call ai_debugLog);
		[]
	};
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º A*
	private _pathNodes = [_startNode, _endNode] call ai_nav_findPathNodes;
	
	if (count _pathNodes == 0) exitWith {[]};
	
	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —É–∑–ª—ã –≤ –ø–æ–∑–∏—Ü–∏–∏
	private _pathPositions = [];
	{
		private _nodeData = ai_nav_nodes get _x;
		private _pos = _nodeData get "pos";
		_pathPositions pushBack _pos;
	} forEach _pathNodes;
	
	// –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—É—Ç—å (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏)
	private _optimizedPath = if (_optimize) then {[_pathPositions] call ai_nav_smoothPath_aggressive} else {_pathPositions};
	
	_optimizedPath
};

// ============================================================================
// PATH SMOOTHING - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏
// ============================================================================

// –£–ø—Ä–æ—â–µ–Ω–∏–µ –ø—É—Ç–∏ –º–µ—Ç–æ–¥–æ–º Line-of-Sight
// –£–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏, –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é
ai_nav_smoothPath = {
	params ["_path"];
	
	if (count _path < 3) exitWith {_path}; // –ù–µ—á–µ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
	
	ai_debug_decl(private _tStart = tickTime;)
	
	private _smoothPath = [_path select 0]; // –ù–∞—á–∏–Ω–∞–µ–º —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ç–æ—á–∫–∏
	private _currentIdx = 0;
	
	while {_currentIdx < (count _path - 1)} do {
		private _fromPos = _path select _currentIdx;
		private _farthestIdx = _currentIdx + 1;
		
		// –ò—â–µ–º —Å–∞–º—É—é –¥–∞–ª—å–Ω—é—é —Ç–æ—á–∫—É, –¥–æ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –¥–æ–π—Ç–∏ –ø–æ –ø—Ä—è–º–æ–π
		for "_i" from (_currentIdx + 2) to (count _path - 1) do {
			private _toPos = _path select _i;
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º line-of-sight (–Ω–µ—Ç –ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π)
			if ([_fromPos, _toPos] call ai_nav_hasLineOfSight) then {
				_farthestIdx = _i; // –ú–æ–∂–µ–º –¥–æ–π—Ç–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
			} else {
				break; // –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ - –¥–∞–ª—å—à–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
			};
		};
		
		// –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º—É—é –¥–∞–ª—å–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç–æ—á–∫—É
		_smoothPath pushBack (_path select _farthestIdx);
		_currentIdx = _farthestIdx;
	};
	
	ai_debug_decl([
		"Path smoothing: %1 ‚Üí %2 waypoints in %3ms" arg 
		count _path arg 
		count _smoothPath arg 
		((tickTime - _tStart)*1000)toFixed 2
	] call ai_debugLog);
	
	_smoothPath
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ line-of-sight –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
ai_nav_hasLineOfSight = {
	params ["_pos1", "_pos2"];
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
	private _intersections = lineIntersectsSurfaces [
		_pos1 vectoradd vec3(0,0,0.4),
		_pos2 vectoradd vec3(0,0,0.4),
		objNull,
		objNull,
		true,
		1,
		"VIEW",
		"GEOM"
	];
	
	// –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π - –µ—Å—Ç—å line of sight
	count _intersections == 0
};

ai_nav_smoothPath_fast = {
    params ["_path"];
    
    if (count _path < 3) exitWith {_path};
    
	ai_debug_decl(private _tStart = tickTime;)

    private _result = [_path select 0];
    
    for "_i" from 1 to (count _path - 2) do {
        private _v1 = (_path select _i) vectorDiff (_path select (_i - 1));
        private _v2 = (_path select (_i + 1)) vectorDiff (_path select _i);
        
        // –ï—Å–ª–∏ –≤–µ–∫—Ç–æ—Ä—ã –Ω–µ —Å–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã - —ç—Ç–æ –ø–æ–≤–æ—Ä–æ—Ç
        if (vectorMagnitude (_v1 vectorCrossProduct _v2) > 0.1) then {
            _result pushBack (_path select _i);
        };
    };
    
    _result pushBack (_path select (count _path - 1));
    ai_debug_decl([
        "Path smoothing: %1 ‚Üí %2 waypoints in %3ms" arg 
        count _path arg 
        count _result arg 
        ((tickTime - _tStart)*1000)toFixed 2
    ] call ai_debugLog);
    _result
};

// –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è "–ª–µ—Å–µ–Ω–æ–∫"
ai_nav_smoothPath_aggressive = {
    params ["_path"];
    
    if (count _path < 3) exitWith {_path};
    
    private _result = [_path select 0];
    
    for "_i" from 1 to (count _path - 2) do {
        private _prev = _path select (_i - 1);
        private _curr = _path select _i;
        private _next = _path select (_i + 1);
        
        private _v1 = _curr vectorDiff _prev;
        private _v2 = _next vectorDiff _curr;
        
        // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏
        private _len1 = vectorMagnitude _v1;
        private _len2 = vectorMagnitude _v2;
        
        if (_len1 > 0.1 && _len2 > 0.1) then {
            private _dot = (_v1 select 0) * (_v2 select 0) + 
                           (_v1 select 1) * (_v2 select 1) + 
                           (_v1 select 2) * (_v2 select 2);
            private _cosAngle = (_dot / (_len1 * _len2)) max -1 min 1;
            private _angle = acos _cosAngle;
            
            // –ü–æ—Ä–æ–≥: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–≥–æ–ª > 20 –≥—Ä–∞–¥—É—Å–æ–≤
            // –≠—Ç–æ —É–±–µ—Ä—ë—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ "–ª–µ—Å–µ–Ω–æ–∫" (–º–µ–ª–∫–∏–µ –∑–∏–≥–∑–∞–≥–∏)
            if (_angle > 20) then {
                _result pushBack _curr;
            };
        };
    };
    
    _result pushBack (_path select (count _path - 1));
    _result
};

//–∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–∏—Å–∫ –ø—É—Ç–∏
// –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ ai_nav_findPath (–ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 625)
// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å–ª–µ ai_nav_findPath (–ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 625)

// –ù–∞–π—Ç–∏ –ø—É—Ç—å —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ä–µ–≥–∏–æ–Ω–æ–≤
ai_nav_findPath_autoGenerate = {
	params ["_startPos", "_endPos", ["_optimize", true], ["_maxRegionsToGenerate", 5], ["_pathWidth", 1]];
	
	ai_debug_decl(["Finding path (auto-generate) from %1 to %2 (width=%3)" arg _startPos arg _endPos arg _pathWidth] call ai_debugLog);
	ai_debug_decl(private _tTotal = tickTime;)
	
	// –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª
	private _startNode = [_startPos] call ai_nav_findNearestNode;
	
	if (_startNode == -1) then {
		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω —Å–æ —Å–≤—è–∑—è–º–∏
		[_startPos] call ai_nav_updateRegion;
		_startNode = [_startPos] call ai_nav_findNearestNode;
	};
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—á–Ω—ã–π —É–∑–µ–ª
	private _endNode = [_endPos] call ai_nav_findNearestNode;
	
	// –ï—Å–ª–∏ –∫–æ–Ω–µ—á–Ω—ã–π —É–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏–æ–Ω—ã –Ω–∞ –ø—É—Ç–∏
	if (_endNode == -1) then {
		ai_debug_decl(["End node not found, generating regions on path..." ] call ai_debugLog);
		
		// –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –∫ –∫–æ–Ω—Ü—É
		private _startRegionKey = [_startPos select 0, _startPos select 1] call ai_nav_getRegionKey;
		private _endRegionKey = [_endPos select 0, _endPos select 1] call ai_nav_getRegionKey;
		
		// –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—á–Ω—ã–π
		if (_startRegionKey == _endRegionKey) then {
			[_endPos] call ai_nav_updateRegion;
			ai_debug_decl(["Updated end region %1" arg _endRegionKey] call ai_debugLog);
		} else {
			// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏–æ–Ω—ã –ø–æ –ª–∏–Ω–∏–∏ –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –∫ –∫–æ–Ω—Ü—É —Å –∑–∞–¥–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π
			[_startPos, _endPos, _maxRegionsToGenerate, _pathWidth] call ai_nav_generateRegionsOnLine_withInit;
		};
		
		// –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—â–µ–º –∫–æ–Ω–µ—á–Ω—ã–π —É–∑–µ–ª
		_endNode = [_endPos] call ai_nav_findNearestNode;
		
		if (_endNode == -1) exitWith {
			ai_debug_decl(["Still no end node after generation" ] call ai_debugLog);
			[]
		};
	};
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º A*
	private _pathNodes = [_startNode, _endNode] call ai_nav_findPathNodes;
	
	if (count _pathNodes == 0) exitWith {[]};
	
	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —É–∑–ª—ã –≤ –ø–æ–∑–∏—Ü–∏–∏
	private _pathPositions = [];
	{
		private _nodeData = ai_nav_nodes get _x;
		private _pos = _nodeData get "pos";
		_pathPositions pushBack _pos;
	} forEach _pathNodes;
	
	// –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—É—Ç—å
	private _optimizedPath = if (_optimize) then {[_pathPositions] call ai_nav_smoothPath_fast} else {_pathPositions};
	
	ai_debug_decl(["Path found with auto-generation in %1ms" arg ((tickTime - _tTotal)*1000)toFixed 2] call ai_debugLog);
	
	_optimizedPath
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤–¥–æ–ª—å –ª–∏–Ω–∏–∏ –° –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ï–ô (–≤–∫–ª—é—á–∞—è entrance points)
// _pathWidth - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
ai_nav_generateRegionsOnLine_withInit = {
	params ["_startPos", "_endPos", "_maxRegions", ["_pathWidth", 1]];
	
	ai_debug_decl(private _tTotal = tickTime;)
	
	private _direction = _endPos vectorDiff _startPos;
	private _distance = vectorMagnitude _direction;
	private _dirNorm = vectorNormalized _direction;
	
	// –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —à–∏—Ä–∏–Ω—ã –ø—É—Ç–∏
	private _perpDir = [
		-(_dirNorm select 1),
		_dirNorm select 0,
		0
	];
	
	private _generatedCount = 0;
	
	// –®–∞–≥–∞–µ–º –≤–¥–æ–ª—å –ª–∏–Ω–∏–∏ —Å —à–∞–≥–æ–º —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
	private _stepSize = ai_nav_regionSize;
	private _steps = ceil(_distance / _stepSize) min _maxRegions;
	
	ai_debug_decl(["Generating regions with init: steps=%1, pathWidth=%2" arg _steps arg _pathWidth] call ai_debugLog);
	
	for "_i" from 0 to _steps do {
		private _centerPos = _startPos vectorAdd (_dirNorm vectorMultiply (_i * _stepSize));
		
		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏–æ–Ω—ã –≤ "–∫–æ—Ä–∏–¥–æ—Ä–µ" –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
		// –ï—Å–ª–∏ _pathWidth = 1, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏–æ–Ω
		// –ï—Å–ª–∏ _pathWidth = 2, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä + 1 —Ä–µ–≥–∏–æ–Ω –≤ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É
		for "_w" from (-(_pathWidth - 1)) to (_pathWidth - 1) do {
			private _offsetPos = _centerPos vectorAdd (_perpDir vectorMultiply (_w * ai_nav_regionSize));
			
			// –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–ª—è –Ω–æ–≤—ã—Ö, –∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö)
			[_offsetPos] call ai_nav_updateRegion;
			_generatedCount = _generatedCount + 1;
		};
	};
	
	ai_debug_decl(["Generated %1 regions in corridor in %2ms" arg _generatedCount arg ((tickTime - _tTotal)*1000)toFixed 2] call ai_debugLog);
	
	_generatedCount
};

// ============================================================================
// –ß–ê–°–¢–ò–ß–ù–´–ô –ü–£–¢–¨ (Partial Path) - –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ AI
// ============================================================================

// –ù–∞–π—Ç–∏ —á–∞—Å—Ç–∏—á–Ω—ã–π –ø—É—Ç—å –∫ –±–ª–∏–∂–∞–π—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç–æ—á–∫–µ –∫ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π A* —Å —Ä–∞–Ω–Ω–∏–º –≤—ã—Ö–æ–¥–æ–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
ai_nav_findPartialPath = {
	params ["_startPos", "_endPos", ["_optimize", true],["_refPathNodes",null]];
	
	ai_debug_decl(["Finding partial path from %1 to %2" arg _startPos arg _endPos] call ai_debugLog);
	ai_debug_decl(private _tTotal = tickTime;)
	
	// –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª
	private _startNode = [_startPos] call ai_nav_findNearestNode;
	
	if (_startNode == -1) exitWith {
		ai_debug_decl(["No start node found near %1" arg _startPos] call ai_debugLog);
		[]
	};
	
	// –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π A* —Å —Ä–∞–Ω–Ω–∏–º –≤—ã—Ö–æ–¥–æ–º
	// –û–Ω –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç –ø—Ä—è–º–æ–π –ø—É—Ç—å (–µ—Å–ª–∏ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–∂–∏–º–∞)
	// –ò–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–π —É–∑–µ–ª (–µ—Å–ª–∏ —Ü–µ–ª—å –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–∞)
	private _pathNodes = [_startNode, _endPos, 2] call ai_nav_findPathToClosestNode;
	
	if (count _pathNodes == 0) exitWith {
		ai_debug_decl(["No path found"] call ai_debugLog);
		[]
	};
	
	if !isNullVar(_refPathNodes) then {
		refset(_refPathNodes,_pathNodes);
	};
	
	
	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —É–∑–ª—ã –≤ –ø–æ–∑–∏—Ü–∏–∏
	private _pathPositions = [];
	{
		private _nodeData = ai_nav_nodes get _x;
		private _pos = _nodeData get "pos";
		_pathPositions pushBack _pos;
	} forEach _pathNodes;
	
	// –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—É—Ç—å
	private _optimizedPath = if (_optimize) then {[_pathPositions] call ai_nav_smoothPath_fast} else {_pathPositions};
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã —Ä–µ–∞–ª—å–Ω–æ–π —Ü–µ–ª–∏
	private _actualEnd = _pathPositions select (count _pathPositions - 1);
	private _distToTarget = _actualEnd distance _endPos;
	private _isPartial = _distToTarget > 5;
	
	ai_debug_decl([
		"Path found in %1ms: %2 waypoints, distance to target=%3m (partial=%4)" arg 
		((tickTime - _tTotal)*1000)toFixed 2 arg
		count _optimizedPath arg
		_distToTarget toFixed 2 arg
		_isPartial
	] call ai_debugLog);
	
	_optimizedPath
};

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π A* - –Ω–∞—Ö–æ–¥–∏—Ç –ø—É—Ç—å –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –¥–æ—Å—Ç–∏–∂–∏–º–æ–º—É —É–∑–ª—É –∫ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
// –í–º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–∑–ª–∞, –∏—â–µ—Ç —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–∏–º—ã—Ö —É–∑–ª–æ–≤ –±–ª–∏–∂–∞–π—à–∏–π –∫ –ø–æ–∑–∏—Ü–∏–∏
// –° –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —Ä–∞–Ω–Ω–µ–≥–æ –≤—ã—Ö–æ–¥–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–∏–º—ã—Ö —Ü–µ–ª–µ–π
// –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: –ª–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –º–∞–ª—ã—Ö openSet, heap –¥–ª—è –±–æ–ª—å—à–∏—Ö
ai_nav_findPathToClosestNode = {
	params ["_startNodeId", "_targetPos", ["_earlyExitDistance", 2]];
	FHEADER;
	
	ai_debug_decl(private _tStart = tickTime;)
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
	private _openSet = []; // –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ heap –ò–õ–ò –º–∞—Å—Å–∏–≤
	private _useHeap = false; // –§–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è heap
	private _inOpenSet = createHashMap; // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –≤ openSet
	private _closedSet = createHashMap;
	private _cameFrom = createHashMap;
	
	private _gScore = createHashMap;
	_gScore set [_startNodeId, 0];
	
	private _fScore = createHashMap;
	private _startPos = (ai_nav_nodes get _startNodeId) get "pos";
	private _startF = [_startNodeId, _targetPos] call ai_nav_heuristicPos;
	_fScore set [_startNodeId, _startF];
	
	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª
	_openSet pushBack [_startNodeId, _startF];
	_inOpenSet set [_startNodeId, true];
	
	private _iterations = 0;
	private _maxIterations = 200; // –ñ–µ—Å—Ç–∫–∏–π –ª–∏–º–∏—Ç
	
	// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–∑–ª–∞ –∫ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
	private _closestNode = _startNodeId;
	private _closestDist = _startPos distance _targetPos;
	
	ai_debug_decl(private _maxOpenSetSize = 0;)
	ai_debug_decl(private _earlyExit = false;)
	ai_debug_decl(private _minSearchTime = 0;)
	ai_debug_decl(private _neighborsTime = 0;)
	ai_debug_decl(private _totalNeighborsChecked = 0;)
	ai_debug_decl(private _heapUsed = 0;)
	ai_debug_decl(private _linearUsed = 0;)
	
	while {count _openSet > 0 && {_iterations < _maxIterations}} do { 
		_iterations = _iterations + 1;
		
		ai_debug_decl(if (count _openSet > _maxOpenSetSize) then {_maxOpenSetSize = count _openSet};)
		
		ai_debug_decl(private _tMin = tickTime;)
		
		private _current = -1;
		private _minIdx = 0;
		
		// –ê–î–ê–ü–¢–ò–í–ù–´–ô –í–´–ë–û–†: heap –¥–ª—è –±–æ–ª—å—à–∏—Ö openSet (>25), –ª–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –º–∞–ª—ã—Ö
		if (count _openSet > 25) then {
			// HEAP MODE: O(log n) –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
			ai_debug_decl(_heapUsed = _heapUsed + 1;)
			
			if (!_useHeap) then {
				// –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ heap - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –≤ –∫—É—á—É
				_useHeap = true;
				// –ü—Ä–æ—Å—Ç–∞—è heapify - –≤—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–Ω–æ–≤–æ
				private _tempSet = +_openSet;
				_openSet resize 0;
				{
					[_openSet, _x select 0, _x select 1] call ai_nav_heapInsert;
				} forEach _tempSet;
			};
			
			private _minNode = [_openSet] call ai_nav_heapExtractMin;
			_current = _minNode select 0;
			
		} else {
			// LINEAR MODE: O(n) –Ω–æ –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ –º–∞–ª—ã—Ö –º–∞—Å—Å–∏–≤–∞—Ö
			ai_debug_decl(_linearUsed = _linearUsed + 1;)
			
			// –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫ –º–∏–Ω–∏–º—É–º–∞
			_minIdx = 0;
			private _minF = (_openSet select 0) select 1;
			
			for "_i" from 1 to (count _openSet - 1) do {
				private _f = (_openSet select _i) select 1;
				if (_f < _minF) then {
					_minF = _f;
					_minIdx = _i;
				};
			};
			
			_current = (_openSet select _minIdx) select 0;
			_openSet deleteAt _minIdx;
		};
		
		ai_debug_decl(_minSearchTime = _minSearchTime + (tickTime - _tMin);)
		
		// –£–¥–∞–ª—è–µ–º –∏–∑ inOpenSet –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ closedSet
		_inOpenSet deleteAt _current;
		_closedSet set [_current, true];
		
		// –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π —É–∑–µ–ª –∫ —Ü–µ–ª–∏
		private _currentPos = (ai_nav_nodes get _current) get "pos";
		private _distToTarget = _currentPos distance _targetPos;
		
		if (_distToTarget < _closestDist) then {
			_closestDist = _distToTarget;
			_closestNode = _current;
			
			// –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –†–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —É–∑–µ–ª –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏
			if (_distToTarget <= _earlyExitDistance) then {
				ai_debug_decl(_earlyExit = true;)
				break;
			};
		};
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–µ–π - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û
		ai_debug_decl(private _tNeighbors = tickTime;)
		private _neighbors = ai_nav_adjacency getOrDefault [_current, []];
		
		{
			_x params ["_neighborId", "_cost"];
			
			if (_neighborId in _closedSet) then {continue};
			
			ai_debug_decl(_totalNeighborsChecked = _totalNeighborsChecked + 1;)
			
			private _tentativeGScore = (_gScore getOrDefault [_current, 999999]) + _cost;
			
			if (_tentativeGScore < (_gScore getOrDefault [_neighborId, 999999])) then {
				_cameFrom set [_neighborId, _current];
				_gScore set [_neighborId, _tentativeGScore];
				
				// –≠–≤—Ä–∏—Å—Ç–∏–∫–∞ = —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
				private _h = [_neighborId, _targetPos] call ai_nav_heuristicPos;
				private _newF = _tentativeGScore + _h;
				_fScore set [_neighborId, _newF];
				
				if (!(_neighborId in _inOpenSet)) then {
					if (_useHeap) then {
						[_openSet, _neighborId, _newF] call ai_nav_heapInsert;
					} else {
						_openSet pushBack [_neighborId, _newF];
					};
					_inOpenSet set [_neighborId, true];
				};
			};
		} forEach _neighbors;
		ai_debug_decl(_neighborsTime = _neighborsTime + (tickTime - _tNeighbors);)
	};
	
	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –±–ª–∏–∂–∞–π—à–µ–º—É —É–∑–ª—É
	private _path = [_cameFrom, _closestNode] call ai_nav_reconstructPath;
	
	ai_debug_decl([
		"=== PARTIAL PATH PROFILING ===%1Path: %2 nodes, %3 iters, closest=%4m, maxOpenSet=%5, earlyExit=%6%1MinSearch: %7ms (heap=%8, linear=%9) | Neighbors: %10ms (%11 checked) | TOTAL: %12ms" arg
		endl arg
		count _path arg
		_iterations arg
		(_closestDist toFixed 2) arg
		_maxOpenSetSize arg
		_earlyExit arg
		(_minSearchTime*1000)toFixed 2 arg
		_heapUsed arg
		_linearUsed arg
		(_neighborsTime*1000)toFixed 2 arg
		_totalNeighborsChecked arg
		((tickTime - _tStart)*1000)toFixed 2
	] call ai_debugLog);
	
	RETURN(_path);
};

// –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π —É–∑–µ–ª –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
// –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –∏—â–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏
ai_nav_findNearestNodeTowards = {
	params ["_startPos", "_targetPos", ["_maxSearchDistance", 100]];
	
	ai_debug_decl(private _tStart = tickTime;)
	
	private _direction = _targetPos vectorDiff _startPos;
	private _dirNorm = vectorNormalized _direction;
	private _targetDistance = (vectorMagnitude _direction) min _maxSearchDistance;
	
	// –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏ (–≤–¥–æ–ª—å –ª—É—á–∞)
	private _regionsToCheck = [];
	private _stepSize = ai_nav_regionSize;
	private _steps = ceil(_targetDistance / _stepSize);
	
	ai_debug_decl(private _totalRegions = 0;)
	
	// –ò–¥–µ–º –≤–¥–æ–ª—å –ª–∏–Ω–∏–∏ –∫ —Ü–µ–ª–∏ –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã
	for "_i" from 0 to _steps do {
		private _checkPos = _startPos vectorAdd (_dirNorm vectorMultiply (_i * _stepSize));
		private _regionKey = [_checkPos select 0, _checkPos select 1] call ai_nav_getRegionKey;
		
		// –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –∏ –µ–≥–æ —Å–æ—Å–µ–¥–µ–π (–¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∑–æ–Ω—ã –ø–æ–∏—Å–∫–∞)
		if (_regionKey in ai_nav_regions) then {
			_regionsToCheck pushBackUnique _regionKey;
			ai_debug_decl(_totalRegions = _totalRegions + 1;)
			
			// –î–æ–±–∞–≤–ª—è–µ–º 4 –ø—Ä—è–º—ã—Ö —Å–æ—Å–µ–¥–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∑–æ–Ω—ã
			_regionKey splitString "_" params ["_rx", "_ry"];
			_rx = parseNumber _rx; _ry = parseNumber _ry;
			
			{
				_x params ["_dx", "_dy"];
				private _neighborKey = format ["%1_%2", _rx + _dx, _ry + _dy];
				if (_neighborKey in ai_nav_regions) then {
					_regionsToCheck pushBackUnique _neighborKey;
				};
			} forEach [[0,1], [0,-1], [1,0], [-1,0]]; // –¢–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ —Å–æ—Å–µ–¥–∏
		};
	};
	
	ai_debug_decl(["Searching in %1 regions towards target" arg count _regionsToCheck] call ai_debugLog);
	
	// –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ - –∏—â–µ–º –≤ –±–ª–∏–∂–∞–π—à–∏—Ö –æ—Ç —Å—Ç–∞—Ä—Ç–∞
	if (count _regionsToCheck == 0) then {
		private _startRegionKey = [_startPos select 0, _startPos select 1] call ai_nav_getRegionKey;
		if (_startRegionKey in ai_nav_regions) then {
			_regionsToCheck pushBack _startRegionKey;
			
			// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö 8 —Å–æ—Å–µ–¥–µ–π
			_startRegionKey splitString "_" params ["_rx", "_ry"];
			_rx = parseNumber _rx; _ry = parseNumber _ry;
			{
				_x params ["_dx", "_dy"];
				private _neighborKey = format ["%1_%2", _rx + _dx, _ry + _dy];
				if (_neighborKey in ai_nav_regions) then {
					_regionsToCheck pushBackUnique _neighborKey;
				};
			} forEach [[0,1], [0,-1], [1,0], [-1,0], [1,1], [-1,1], [1,-1], [-1,-1]];
		};
		ai_debug_decl(["No regions in direction, using %1 regions around start" arg count _regionsToCheck] call ai_debugLog);
	};
	
	private _bestNode = -1;
	private _bestScore = -999999;
	
	ai_debug_decl(private _checkedNodes = 0;)
	
	// –ò—â–µ–º —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ —É–∑–ª–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
	{
		private _regionKey = _x;
		private _regionData = ai_nav_regions get _regionKey;
		private _nodeIds = _regionData get "nodes";
		
		{
			private _nodeId = _x;
			private _nodeData = ai_nav_nodes get _nodeId;
			private _nodePos = _nodeData get "pos";
			
			ai_debug_decl(_checkedNodes = _checkedNodes + 1;)
			
			// –í–µ–∫—Ç–æ—Ä –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –∫ —É–∑–ª—É
			private _toNode = _nodePos vectorDiff _startPos;
			private _distToNode = vectorMagnitude _toNode;
			
			if (_distToNode > 0.1) then {
				private _toNodeNorm = vectorNormalized _toNode;
				
				// –°–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ - –Ω–∞—Å–∫–æ–ª—å–∫–æ —É–∑–µ–ª –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏
				private _dotProduct = _dirNorm vectorDotProduct _toNodeNorm;
				
				// –¢–æ–ª—å–∫–æ —É–∑–ª—ã –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏ (dot > 0.3 = —É–≥–æ–ª < 72¬∞)
				if (_dotProduct > 0.3) then {
					private _distanceToTarget = _nodePos distance _targetPos;
					
					// –§–æ—Ä–º—É–ª–∞ –æ—Ü–µ–Ω–∫–∏:
					// - –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–∑–ª–∞–º –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ (+100 * dot)
					// - –®—Ç—Ä–∞—Ñ –∑–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Å—Ç–∞—Ä—Ç–∞ (-0.5 * dist)
					// - –ë–æ–Ω—É—Å –∑–∞ –±–ª–∏–∑–æ—Å—Ç—å –∫ —Ü–µ–ª–∏ (-0.3 * distToTarget)
					private _score = (_dotProduct * 100) - (_distToNode * 0.5) - (_distanceToTarget * 0.3);
					
					if (_score > _bestScore) then {
						_bestScore = _score;
						_bestNode = _nodeId;
					};
				};
			};
		} forEach _nodeIds;
	} forEach _regionsToCheck;
	
	ai_debug_decl(private _tEnd = tickTime;)
	
	if (_bestNode != -1) then {
		private _bestNodeData = ai_nav_nodes get _bestNode;
		private _bestNodePos = _bestNodeData get "pos";
		ai_debug_decl([
			"Found best node: nodeId=%1, pos=%2, score=%3 | Checked %4 nodes in %5 regions in %6ms" arg 
			_bestNode arg 
			_bestNodePos arg 
			(_bestScore toFixed 2) arg
			_checkedNodes arg
			count _regionsToCheck arg
			((_tEnd - _tStart)*1000)toFixed 2
		] call ai_debugLog);
	} else {
		ai_debug_decl([
			"No suitable node found | Checked %1 nodes in %2 regions in %3ms" arg 
			_checkedNodes arg 
			count _regionsToCheck arg
			((_tEnd - _tStart)*1000)toFixed 2
		] call ai_debugLog);
	};
	
	_bestNode
};