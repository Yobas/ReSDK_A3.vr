// ======================================================
// Copyright (c) 2017-2025 the ReSDK_A3 project
// sdk.relicta.ru
// ======================================================

// ============================================================================
// HPA* NAVIGATION SYSTEM
// ============================================================================
// –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è AI —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 3D –Ω–∞–≤–∏–≥–∞—Ü–∏–∏,
// –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–µ—Ç–∫–∏.
// 
// –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (10√ó10–º —Ä–µ–≥–∏–æ–Ω—ã) –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
// –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞—Ä—Ç –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.
// 
// ============================================================================
// –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢:
// ============================================================================
// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:
//    [getPosASL player, 50] call ai_nav_quickInit;
//
// 2. –ü–æ–∏—Å–∫ –ø—É—Ç–∏:
//    private _path = [getPosASL player, _targetPos] call ai_nav_findPath;
//
// 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π:
//    [getPosASL player, _targetPos] call ai_nav_testPath;
//
// 4. –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:
//    call ai_nav_getStats;
//
// ============================================================================
// –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø:
// ============================================================================
// üü¢ –ó–µ–ª–µ–Ω—ã–µ —Å—Ñ–µ—Ä—ã    - —É–∑–ª—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
// üü° –ñ–µ–ª—Ç—ã–µ –ª–∏–Ω–∏–∏     - –≥—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏–æ–Ω–æ–≤
// üîµ –ì–æ–ª—É–±—ã–µ –ª–∏–Ω–∏–∏    - —Å–≤—è–∑–∏ –≤–Ω—É—Ç—Ä–∏ —Ä–µ–≥–∏–æ–Ω–∞
// üî¥ –ö—Ä–∞—Å–Ω—ã–µ –ª–∏–Ω–∏–∏    - –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏ –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏
// üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ –ª–∏–Ω–∏–∏ - –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å
// ============================================================================

// ============================================================================
// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// ============================================================================
#define AI_NAV_DEBUG true
//#define AI_NAV_DEBUG_DRAW true


// –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
ai_nav_regions = createHashMap;      // regionKey -> region data
ai_nav_nodes = createHashMap;        // nodeId -> node data  
ai_nav_adjacency = createHashMap;    // nodeId -> [[neighborId, cost], ...]

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏
ai_nav_regionSize = 10;              // –†–∞–∑–º–µ—Ä —Ä–µ–≥–∏–æ–Ω–∞ 10√ó10–º
ai_nav_gridStep = 1;                 // –®–∞–≥ —Å–µ—Ç–∫–∏ 1–º
ai_nav_maxSlope = 45;                // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª —Å–∫–ª–æ–Ω–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
ai_nav_raycastHeight = 300;          // –í—ã—Å–æ—Ç–∞ –Ω–∞—á–∞–ª–∞ raycast
ai_nav_minDistZ = 0.7;				// –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ Z –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —É–∑–ª–æ–≤ –ø–æ z

ai_nav_nodeIdCounter = 0;

#ifdef AI_NAV_DEBUG
	#define ai_debug_decl(linedecl) linedecl
#else
	#define ai_debug_decl(linedecl) 
#endif


// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —É–∑–ª–∞
ai_nav_generateNodeId = {
	ai_nav_nodeIdCounter = ai_nav_nodeIdCounter + 1;
	ai_nav_nodeIdCounter
};

ai_nav_getSlopeAngleVec = {
	params ["_pos1","_pos2"];
	private _dir = _pos2 vectorDiff _pos1;
	private _dirNorm = vectorNormalized _dir;

	// –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä (–ø—Ä–æ–µ–∫—Ü–∏—è –Ω–∞ XY –ø–ª–æ—Å–∫–æ—Å—Ç—å)
	private _horDir = [_dirNorm select 0, _dirNorm select 1, 0];
	private _horDirNorm = vectorNormalized _horDir;

	// –£–≥–æ–ª –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ —Å–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
	private _dotProduct = _dirNorm vectorDotProduct _horDirNorm;
	private _slopeAngle = acos _dotProduct; // –í –≥—Ä–∞–¥—É—Å–∞—Ö
	_slopeAngle
};

// –ë–´–°–¢–†–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–ª–æ–Ω–∞ (–±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
ai_nav_checkSlopeFast = {
	params ["_pos1", "_pos2", "_dist", "_maxSlope"];
	
	// –í—ã—á–∏—Å–ª—è–µ–º deltaZ
	private _deltaZ = abs((_pos2 select 2) - (_pos1 select 2));
	
	// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ Z –±–æ–ª—å—à–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç distance
	// tan(45¬∞) = 1.0, tan(60¬∞) = 1.732, tan(75¬∞) = 3.732
	private _slopeTan = tan _maxSlope;
	
	// –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ)
	// –î–ª—è –º–∞–ª—ã—Ö —É–≥–ª–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å _dist –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
	if (_deltaZ / _dist > _slopeTan) exitWith {false};
	
	true
};

ai_nav_generateRegionNodes = {
	params ["_pos", ["_autoSave", true]];
	
	// –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Ä–µ–≥–∏–æ–Ω–∞
	private _regionKey = _pos call ai_nav_getRegionKey;
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–≥–∏–æ–Ω —É–∂–µ
	if (_regionKey in ai_nav_regions) exitWith {
		ai_debug_decl(["Region %1 already exists, skipping generation" arg _regionKey] call ai_debugLog);
		_regionKey
	};
	
	private _regionStartX = floor((_pos select 0) / ai_nav_regionSize) * ai_nav_regionSize;
	private _regionStartY = floor((_pos select 1) / ai_nav_regionSize) * ai_nav_regionSize;
	private _regionEndX = _regionStartX + ai_nav_regionSize - ai_nav_gridStep; // –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É
	private _regionEndY = _regionStartY + ai_nav_regionSize - ai_nav_gridStep; // –ò—Å–∫–ª—é—á–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
	private _queryPos = [];
	
	ai_debug_decl(private _t = tickTime;)
	for "_x" from _regionStartX to _regionEndX step ai_nav_gridStep do {
		for "_y" from _regionStartY to _regionEndY step ai_nav_gridStep do {
			_queryPos pushBack [
				[_x,_y,ai_nav_raycastHeight],
				[_x,_y,0],
				objNull,
				objNull,
				true,
				-1,
				"ROADWAY", //–∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫–∏ —Å–º–æ–≥—É—Ç —Ö–æ–¥–∏—Ç—å –ø–æ –ª—é–±—ã–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—è–º –∏ –º–æ–±—ã —Å–º–æ–≥—É—Ç
				"ROADWAY",
				false //ret unique
			];
		};
	};

	private _nodes = [];

	//–ø–æ—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
	private _hits = lineIntersectsSurfaces [_queryPos];
	{
		private _prevpos = [0,0,99999];
		{
			_x params ["_pos","_norm","_obj"];
			//–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º—ã–π –≤–µ—Ä—Ö–Ω–∏–π —Å–ª–æ–π (—ç—Ç–æ –∫—Ä—ã—à–∞ –ø–æ—Ç–æ–ª–∫–∞) 
			//–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–µ—Ç –ø–µ—Ä—Ñ –±—É—Å—Ç –Ω–∞ 49% –º–µ–Ω—å—à–µ —Ç–æ—á–µ–∫, –∏ –æ–±—â–∏–π –ø–µ—Ä—Ñ –≤—ã—à–µ –Ω–∞ 30% –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —á—Ç–æ –ø–æ—Ç–æ–ª–æ–∫ —Ö–æ–¥–∏–±–µ–ª—å–Ω—ã–π
			if (_forEachIndex == 0) then {
				private _hitUp = lineIntersectsSurfaces [
					_pos,
					_pos vectoradd vec3(0,0,ai_nav_raycastHeight),
					objNull,
					objNull,
					true,
					1,
					"VIEW",
					"GEOM"
				];
				if (count _hitUp == 0) then {
					continue;
				};
			};
			
			//–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			if (isNullReference(_obj)) then {continue};

			//–µ—Å–ª–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			if (((_prevpos select 2)-(_pos select 2)) < ai_nav_minDistZ) then {
				continue
			};

			_nodes pushBack _pos;

			#ifdef AI_NAV_DEBUG_DRAW
			[_pos,[0,1,0],3,true] call ai_nav_debug_createObj;
			#endif

			_prevpos = _pos;
		} foreach _x;
	} foreach _hits;
	ai_debug_decl(["    generateRegionNodes time %1ms" arg ((tickTime - _t)*1000)toFixed 6] call ai_debugLog);

	#ifdef AI_NAV_DEBUG_DRAW
		ai_debug_loopDrawObjs = [];
		//debug draw region
		private _height =( _pos select 2)-3;
		private _corner1 = asltoatl[_regionStartX, _regionStartY, _height];
		private _corner2 = asltoatl[_regionEndX, _regionStartY, _height];
		private _corner3 = asltoatl[_regionEndX, _regionEndY, _height];
		private _corner4 = asltoatl[_regionStartX, _regionEndY, _height];
		
		// –†–∏—Å—É–µ–º 4 –ª–∏–Ω–∏–∏ –≥—Ä–∞–Ω–∏—Ü —Ä–µ–≥–∏–æ–Ω–∞
		private _loopRegion1 = struct_newp(LoopedObjectFunction,ai_nav_debug_drawNode arg [_corner1 arg _corner2 arg [1 arg 1 arg 0 arg 1] arg 20] arg null arg ai_debug_objs select 0);
		private _loopRegion2 = struct_newp(LoopedObjectFunction,ai_nav_debug_drawNode arg [_corner2 arg _corner3 arg [1 arg 1 arg 0 arg 1] arg 20] arg null arg ai_debug_objs select 0);
		private _loopRegion3 = struct_newp(LoopedObjectFunction,ai_nav_debug_drawNode arg [_corner3 arg _corner4 arg [1 arg 1 arg 0 arg 1] arg 20] arg null arg ai_debug_objs select 0);
		private _loopRegion4 = struct_newp(LoopedObjectFunction,ai_nav_debug_drawNode arg [_corner4 arg _corner1 arg [1 arg 1 arg 0 arg 1] arg 20] arg null arg ai_debug_objs select 0);
		
		ai_debug_loopDrawObjs pushback _loopRegion1;
		ai_debug_loopDrawObjs pushback _loopRegion2;
		ai_debug_loopDrawObjs pushback _loopRegion3;
		ai_debug_loopDrawObjs pushback _loopRegion4;
		
		{
			//! –æ—Ç–∫–ª—é—á–µ–Ω–æ
			//private _loop = struct_newp(LoopedObjectFunction,ai_nav_debug_drawNode arg [asltoatl _x arg asltoatl _x vectoradd vec3(0,0,10) arg null arg 15] arg null arg ai_debug_objs select 0);
			//ai_debug_loopDrawObjs pushback _loop;
		} foreach _nodes;
	#endif

	//–ø–æ—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–µ–π
	ai_debug_decl(private _tEdges = tickTime;)
	private _maxConnectionDist = ai_nav_gridStep * 2; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–≤—è–∑–∏ (–ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏)
	private _edgesList = [];
	_queryPos = [];

	
	private _connectionData = [];
	
	{
		private _currentNode = _x;
		private _currentIdx = _forEachIndex;
		
		// –ò—â–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —É–∑–ª—ã –¥–ª—è —Å–≤—è–∑–∏
		for "_i" from (_currentIdx + 1) to (count _nodes - 1) do {
			private _neighborNode = _nodes select _i;
			private _dist = _currentNode distance _neighborNode;
			
			// –ï—Å–ª–∏ —É–∑–µ–ª –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ —Å–≤—è–∑–∏
			if (_dist <= _maxConnectionDist) then {
				//–ø–æ z —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 1–º (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–π)
				private _deltaZ = abs((_currentNode select 2) - (_neighborNode select 2));
				if (_deltaZ > 1) exitWith {};
				
				// –ë–´–°–¢–†–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–ª–æ–Ω–∞ (–≤–º–µ—Å—Ç–æ getSlopeAngleVec)
				if !([_currentNode, _neighborNode, _dist, ai_nav_maxSlope] call ai_nav_checkSlopeFast) exitWith {};

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
				_queryPos pushBack [
					_currentNode vectoradd vec3(0,0,0.4),
					_neighborNode vectoradd vec3(0,0,0.4),
					objNull,
					objNull,
					true,
					1,
					"VIEW",
					"GEOM"
				];
				
				_connectionData pushBack [_currentNode, _neighborNode, _dist];
				
			};
		};
	} forEach _nodes;
	
	
	_hits = lineIntersectsSurfaces [_queryPos];
	
	{
		if (count _x == 0) then {
			(_connectionData select _forEachIndex) params ["_currentNode","_neighborNode","_dist"];
			_edgesList pushBack ([_currentNode, _neighborNode, _dist]);
			#ifdef AI_NAV_DEBUG_DRAW
				
				private _loopEdge = struct_newp(LoopedObjectFunction,ai_nav_debug_drawNode arg [
					asltoatl _currentNode vectoradd vec3(0,0,0.15) arg 
					asltoatl _neighborNode vectoradd vec3(0.1,0,0.15) arg 
					[0 arg 0.5 arg 1 arg 0.8] arg 
					15
				] arg null arg ai_debug_objs select 0);
				ai_debug_loopDrawObjs pushback _loopEdge;
			#endif
		};
	} foreach _hits;
	
	ai_debug_decl(["    generateRegionEdges time %1ms, edges count: %2" arg ((tickTime - _tEdges)*1000)toFixed 6 arg count _edgesList] call ai_debugLog);
	
	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–≥–∏–æ–Ω, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
	if (_autoSave) then {
		[_regionKey, _nodes, _edgesList] call ai_nav_saveRegion;
	};
	
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á —Ä–µ–≥–∏–æ–Ω–∞
	_regionKey
};

// –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π —É–∑–µ–ª –∫ –ø–æ–∑–∏—Ü–∏–∏
ai_nav_findNearestNode = {
	params ["_pos", ["_maxDistance", 50]];
	
	private _regionKey = _pos call ai_nav_getRegionKey;
	private _regionData = ai_nav_regions get _regionKey;
	
	// –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—â–µ–º –≤ –±–ª–∏–∂–∞–π—à–∏—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö
	if (isNil "_regionData") then {
		private _bestNode = -1;
		private _bestDist = 999999;
		
		{
			private _nodeData = _y;
			private _nodePos = _nodeData get "pos";
			private _dist = _pos distance _nodePos;
			
			if (_dist < _bestDist && _dist <= _maxDistance) then {
				_bestDist = _dist;
				_bestNode = _x;
			};
		} forEach ai_nav_nodes;
		
		if (_bestNode == -1) exitWith {-1};
		_bestNode
	};
	
	// –ò—â–µ–º –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–≥–∏–æ–Ω–µ
	private _nodeIds = _regionData get "nodes";
	private _bestNode = -1;
	private _bestDist = 999999;
	
	{
		private _nodeId = _x;
		private _nodeData = ai_nav_nodes get _nodeId;
		private _nodePos = _nodeData get "pos";
		private _dist = _pos distance _nodePos;
		
		if (_dist < _bestDist) then {
			_bestDist = _dist;
			_bestNode = _nodeId;
		};
	} forEach _nodeIds;
	
	if (_bestDist > _maxDistance) then {
		-1
	} else {
		_bestNode
	}
};


// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Ç—å –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π
ai_nav_reconstructPath = {
	params ["_cameFrom", "_current"];
	
	private _path = [_current];
	
	while {_current in _cameFrom} do {
		_current = _cameFrom get _current;
		_path pushBack _current;
	};
	
	reverse _path;
	_path
};

// –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ø—Ä—è–º–æ–π)
ai_nav_heuristic = {
	params ["_nodeId1", "_nodeId2"];
	
	private _pos1 = (ai_nav_nodes get _nodeId1) get "pos";
	private _pos2 = (ai_nav_nodes get _nodeId2) get "pos";
	//?–º–æ–∂–Ω–æ –ø–æ—Ç–æ–º —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ —á–µ–º –¥–∞–ª—å—à–µ –∏–¥—Ç–∏ –¥–æ —Ü–µ–ª–∏ —Ç–µ–º –≤—ã—à–µ –∫–æ—ç—Ñ (–±—ã—Å—Ç—Ä–µ–µ –ø–æ—Å—á–∏—Ç–∞–µ—Ç—Å—è)
	(_pos1 distance _pos2) * 1.3 //—Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –≤ ~10 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ
};

// –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å–µ–¥–µ–π —É–∑–ª–∞
ai_nav_getNeighbors = {
	params ["_nodeId"];
	
	private _neighbors = ai_nav_adjacency getOrDefault [_nodeId, []];
	_neighbors
};

// A* –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —É–∑–ª–∞–º–∏ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô)
ai_nav_findPathNodes = {
	params ["_startNodeId", "_goalNodeId"];
	FHEADER;
	
	if (_startNodeId == -1 || _goalNodeId == -1) exitWith {
		ai_debug_decl(["Invalid node IDs: start=%1, goal=%2" arg _startNodeId arg _goalNodeId] call ai_debugLog);
		[]
	};
	
	ai_debug_decl(private _tStart = tickTime;)
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
	private _openSet = [_startNodeId];
	private _closedSet = createHashMap; // ‚Üê –ö–†–ò–¢–ò–ß–ù–û: –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
	private _cameFrom = createHashMap;
	
	private _gScore = createHashMap;
	_gScore set [_startNodeId, 0];
	
	private _fScore = createHashMap;
	_fScore set [_startNodeId, [_startNodeId, _goalNodeId] call ai_nav_heuristic];
	
	private _iterations = 0;
	private _maxIterations = 10000;
	
	ai_debug_decl(private _minSearchTime = 0;)
	ai_debug_decl(private _neighborsTime = 0;)
	ai_debug_decl(private _maxOpenSetSize = 0;)
	ai_debug_decl(private _totalNeighborsChecked = 0;)
	
	while {count _openSet > 0 && _iterations < _maxIterations} do {
		_iterations = _iterations + 1;
		
		ai_debug_decl(if (count _openSet > _maxOpenSetSize) then {_maxOpenSetSize = count _openSet};)
		
		// –ù–∞–π—Ç–∏ —É–∑–µ–ª —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º fScore (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
		ai_debug_decl(private _tMin = tickTime;)
		
		// –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –º–∏–Ω–∏–º—É–º–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö HashMap –∑–∞–ø—Ä–æ—Å–æ–≤
		private _minIdx = 0;
		private _current = _openSet select 0;
		private _minF = _fScore getOrDefault [_current, 999999];
		
		for "_i" from 1 to (count _openSet - 1) do {
			private _nodeId = _openSet select _i;
			private _f = _fScore getOrDefault [_nodeId, 999999];
			if (_f < _minF) then {
				_minF = _f;
				_current = _nodeId;
				_minIdx = _i;
			};
		};
		
		ai_debug_decl(_minSearchTime = _minSearchTime + (tickTime - _tMin);)
		
		// –î–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏
		if (_current == _goalNodeId) exitWith {
			private _path = [_cameFrom, _current] call ai_nav_reconstructPath;
			
			ai_debug_decl([
				"Path found: %1 nodes, %2 iterations, maxOpenSet=%3, minSearch=%4ms, neighbors=%5ms (%6 checked) | TOTAL=%7ms" arg 
				count _path arg 
				_iterations arg 
				_maxOpenSetSize arg
				(_minSearchTime*1000)toFixed 2 arg
				(_neighborsTime*1000)toFixed 2 arg
				_totalNeighborsChecked arg
				((tickTime - _tStart)*1000)toFixed 2
			] call ai_debugLog);
			
			RETURN(_path);
		};
		
		// –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–∑ openSet –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ closedSet
		_openSet deleteAt _minIdx; // ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞!
		_closedSet set [_current, true]; // ‚Üê –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–π
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–µ–π
		ai_debug_decl(private _tNeighbors = tickTime;)
		private _neighbors = [_current] call ai_nav_getNeighbors;
		
		{
			_x params ["_neighborId", "_cost"];
			
			// ‚Üê –ü–†–û–ü–£–°–ö–ê–ï–ú –£–ñ–ï –ü–û–°–ï–©–ï–ù–ù–´–ï –£–ó–õ–´!
			if (_neighborId in _closedSet) then {continue};
			
			ai_debug_decl(_totalNeighborsChecked = _totalNeighborsChecked + 1;)
			
			private _tentativeGScore = (_gScore getOrDefault [_current, 999999]) + _cost;
			
			if (_tentativeGScore < (_gScore getOrDefault [_neighborId, 999999])) then {
				_cameFrom set [_neighborId, _current];
				_gScore set [_neighborId, _tentativeGScore];
				_fScore set [_neighborId, _tentativeGScore + ([_neighborId, _goalNodeId] call ai_nav_heuristic)];
				
				if (!(_neighborId in _openSet)) then {
					_openSet pushBack _neighborId;
				};
			};
		} forEach _neighbors;
		ai_debug_decl(_neighborsTime = _neighborsTime + (tickTime - _tNeighbors);)
	};
	
	ai_debug_decl([
		"Path not found after %1 iterations (max: %2), maxOpenSet=%3" arg 
		_iterations arg 
		_maxIterations arg
		_maxOpenSetSize
	] call ai_debugLog);
	
	[]
};

// –ù–∞–π—Ç–∏ –ø—É—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–∑–∏—Ü–∏—è–º–∏
ai_nav_findPath = {
	params ["_startPos", "_endPos",["_optimize",true]];
	
	ai_debug_decl(["Finding path from %1 to %2" arg _startPos arg _endPos] call ai_debugLog);
	
	// –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ —É–∑–ª—ã
	private _startNode = [_startPos] call ai_nav_findNearestNode;
	private _endNode = [_endPos] call ai_nav_findNearestNode;
	
	if (_startNode == -1) exitWith {
		ai_debug_decl(["No start node found near %1" arg _startPos] call ai_debugLog);
		[]
	};
	
	if (_endNode == -1) exitWith {
		ai_debug_decl(["No end node found near %1" arg _endPos] call ai_debugLog);
		[]
	};
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º A*
	private _pathNodes = [_startNode, _endNode] call ai_nav_findPathNodes;
	
	if (count _pathNodes == 0) exitWith {[]};
	
	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —É–∑–ª—ã –≤ –ø–æ–∑–∏—Ü–∏–∏
	private _pathPositions = [];
	{
		private _nodeData = ai_nav_nodes get _x;
		private _pos = _nodeData get "pos";
		_pathPositions pushBack _pos;
	} forEach _pathNodes;
	
	// –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—É—Ç—å (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏)
	private _optimizedPath = if (_optimize) then {[_pathPositions] call ai_nav_smoothPath_fast} else {_pathPositions};
	
	_optimizedPath
};

// ============================================================================
// PATH SMOOTHING - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏
// ============================================================================

// –£–ø—Ä–æ—â–µ–Ω–∏–µ –ø—É—Ç–∏ –º–µ—Ç–æ–¥–æ–º Line-of-Sight
// –£–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏, –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é
ai_nav_smoothPath = {
	params ["_path"];
	
	if (count _path < 3) exitWith {_path}; // –ù–µ—á–µ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
	
	ai_debug_decl(private _tStart = tickTime;)
	
	private _smoothPath = [_path select 0]; // –ù–∞—á–∏–Ω–∞–µ–º —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ç–æ—á–∫–∏
	private _currentIdx = 0;
	
	while {_currentIdx < (count _path - 1)} do {
		private _fromPos = _path select _currentIdx;
		private _farthestIdx = _currentIdx + 1;
		
		// –ò—â–µ–º —Å–∞–º—É—é –¥–∞–ª—å–Ω—é—é —Ç–æ—á–∫—É, –¥–æ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –¥–æ–π—Ç–∏ –ø–æ –ø—Ä—è–º–æ–π
		for "_i" from (_currentIdx + 2) to (count _path - 1) do {
			private _toPos = _path select _i;
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º line-of-sight (–Ω–µ—Ç –ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π)
			if ([_fromPos, _toPos] call ai_nav_hasLineOfSight) then {
				_farthestIdx = _i; // –ú–æ–∂–µ–º –¥–æ–π—Ç–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
			} else {
				break; // –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ - –¥–∞–ª—å—à–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
			};
		};
		
		// –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º—É—é –¥–∞–ª—å–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç–æ—á–∫—É
		_smoothPath pushBack (_path select _farthestIdx);
		_currentIdx = _farthestIdx;
	};
	
	ai_debug_decl([
		"Path smoothing: %1 ‚Üí %2 waypoints in %3ms" arg 
		count _path arg 
		count _smoothPath arg 
		((tickTime - _tStart)*1000)toFixed 2
	] call ai_debugLog);
	
	_smoothPath
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ line-of-sight –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
ai_nav_hasLineOfSight = {
	params ["_pos1", "_pos2"];
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
	private _intersections = lineIntersectsSurfaces [
		_pos1 vectoradd vec3(0,0,0.4),
		_pos2 vectoradd vec3(0,0,0.4),
		objNull,
		objNull,
		true,
		1,
		"VIEW",
		"GEOM"
	];
	
	// –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π - –µ—Å—Ç—å line of sight
	count _intersections == 0
};

ai_nav_smoothPath_fast = {
    params ["_path"];
    
    if (count _path < 3) exitWith {_path};
    
	ai_debug_decl(private _tStart = tickTime;)

    private _result = [_path select 0];
    
    for "_i" from 1 to (count _path - 2) do {
        private _v1 = (_path select _i) vectorDiff (_path select (_i - 1));
        private _v2 = (_path select (_i + 1)) vectorDiff (_path select _i);
        
        // –ï—Å–ª–∏ –≤–µ–∫—Ç–æ—Ä—ã –Ω–µ —Å–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã - —ç—Ç–æ –ø–æ–≤–æ—Ä–æ—Ç
        if (vectorMagnitude (_v1 vectorCrossProduct _v2) > 0.1) then {
            _result pushBack (_path select _i);
        };
    };
    
    _result pushBack (_path select (count _path - 1));
    ai_debug_decl([
        "Path smoothing: %1 ‚Üí %2 waypoints in %3ms" arg 
        count _path arg 
        count _result arg 
        ((tickTime - _tStart)*1000)toFixed 2
    ] call ai_debugLog);
    _result
};
