// ======================================================
// Copyright (c) 2017-2025 the ReSDK_A3 project
// sdk.relicta.ru
// ======================================================

// ============================================================================
// HPA* NAVIGATION SYSTEM
// ============================================================================
// –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è AI —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 3D –Ω–∞–≤–∏–≥–∞—Ü–∏–∏,
// –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–µ—Ç–∫–∏.
// 
// –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (10√ó10–º —Ä–µ–≥–∏–æ–Ω—ã) –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
// –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞—Ä—Ç –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.
// 
// ============================================================================
// –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢:
// ============================================================================
// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:
//    [getPosASL player, 50] call ai_nav_quickInit;
//
// 2. –ü–æ–∏—Å–∫ –ø—É—Ç–∏:
//    private _path = [getPosASL player, _targetPos] call ai_nav_findPath;
//
// 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π:
//    [getPosASL player, _targetPos] call ai_nav_testPath;
//
// 4. –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:
//    call ai_nav_getStats;
//
// ============================================================================
// –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø:
// ============================================================================
// üü¢ –ó–µ–ª–µ–Ω—ã–µ —Å—Ñ–µ—Ä—ã    - —É–∑–ª—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
// üü° –ñ–µ–ª—Ç—ã–µ –ª–∏–Ω–∏–∏     - –≥—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏–æ–Ω–æ–≤
// üîµ –ì–æ–ª—É–±—ã–µ –ª–∏–Ω–∏–∏    - —Å–≤—è–∑–∏ –≤–Ω—É—Ç—Ä–∏ —Ä–µ–≥–∏–æ–Ω–∞
// üî¥ –ö—Ä–∞—Å–Ω—ã–µ –ª–∏–Ω–∏–∏    - –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏ –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏
// üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ –ª–∏–Ω–∏–∏ - –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å
// ============================================================================

// ============================================================================
// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// ============================================================================
#define AI_NAV_DEBUG true
#define AI_NAV_DEBUG_DRAW true


// –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
ai_nav_regions = createHashMap;      // regionKey -> region data
ai_nav_nodes = createHashMap;        // nodeId -> node data  
ai_nav_adjacency = createHashMap;    // nodeId -> [[neighborId, cost], ...]

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏
ai_nav_regionSize = 10;              // –†–∞–∑–º–µ—Ä —Ä–µ–≥–∏–æ–Ω–∞ 10√ó10–º
ai_nav_gridStep = 1;                 // –®–∞–≥ —Å–µ—Ç–∫–∏ 1–º
ai_nav_maxSlope = 45;                // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª —Å–∫–ª–æ–Ω–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
ai_nav_raycastHeight = 300;          // –í—ã—Å–æ—Ç–∞ –Ω–∞—á–∞–ª–∞ raycast
ai_nav_minDistZ = 0.7;				// –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ Z –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —É–∑–ª–æ–≤ –ø–æ z

ai_nav_nodeIdCounter = 0;

#ifdef AI_NAV_DEBUG
	#define ai_debug_decl(linedecl) linedecl
#else
	#define ai_debug_decl(linedecl) 
#endif

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
// –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ (3DEN), —Ç–∞–∫ –∏ –≤ –∏–≥—Ä–µ
ai_debugLog = {
	if (is3den) then {
		_this call printTrace; // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
	} else {
		trace(format _this); // –ú–∞–∫—Ä–æ—Å –∏–∑ engine.hpp
	};
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —É–∑–ª–∞
ai_nav_generateNodeId = {
	ai_nav_nodeIdCounter = ai_nav_nodeIdCounter + 1;
	ai_nav_nodeIdCounter
};

// –û—á–∏—Å—Ç–∫–∞ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
ai_nav_clearDebugObjects = {
	{
		if (!isNullReference(_x)) then {
			deleteVehicle _x;
		};
	} forEach ai_debug_objs;
	ai_debug_objs = [];
	["Debug objects cleared"] call ai_debugLog;
};


ai_nav_debug_createObj = {
	params ["_pos", ["_color",[1,1,1]],["_size",1],["_isSphere",false],["_list",ai_debug_objs]];
	private _cls = "Sign_Arrow_F";
	if (_isSphere) then {
		_cls = "Sign_Sphere10cm_F";
	};
	private _arrow = _cls createVehicle [0,0,0];
	_arrow setPosASL _pos;
	_arrow setObjectTexture [0, format["#(rgb,8,8,3)color(%1,%2,%3,1)",_color select 0,_color select 1,_color select 2]];
	_arrow setObjectScale _size;
	_list pushBack _arrow;
	_arrow
};

ai_nav_generateRegionNodes = {
	params ["_pos", ["_autoSave", true]];
	
	// –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Ä–µ–≥–∏–æ–Ω–∞
	private _regionKey = _pos call ai_nav_getRegionKey;
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–≥–∏–æ–Ω —É–∂–µ
	if (_regionKey in ai_nav_regions) exitWith {
		ai_debug_decl(["Region %1 already exists, skipping generation" arg _regionKey] call ai_debugLog);
		_regionKey
	};
	
	private _regionStartX = floor((_pos select 0) / ai_nav_regionSize) * ai_nav_regionSize;
	private _regionStartY = floor((_pos select 1) / ai_nav_regionSize) * ai_nav_regionSize;
	private _regionEndX = _regionStartX + ai_nav_regionSize - ai_nav_gridStep; // –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É
	private _regionEndY = _regionStartY + ai_nav_regionSize - ai_nav_gridStep; // –ò—Å–∫–ª—é—á–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
	private _queryPos = [];
	
	ai_debug_decl(private _t = tickTime;)
	for "_x" from _regionStartX to _regionEndX step ai_nav_gridStep do {
		for "_y" from _regionStartY to _regionEndY step ai_nav_gridStep do {
			_queryPos pushBack [
				[_x,_y,ai_nav_raycastHeight],
				[_x,_y,0],
				objNull,
				objNull,
				true,
				-1,
				"ROADWAY", //–∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫–∏ —Å–º–æ–≥—É—Ç —Ö–æ–¥–∏—Ç—å –ø–æ –ª—é–±—ã–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—è–º –∏ –º–æ–±—ã —Å–º–æ–≥—É—Ç
				"ROADWAY",
				false //ret unique
			];
		};
	};

	private _nodes = [];

	//–ø–æ—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
	private _hits = lineIntersectsSurfaces [_queryPos];
	{
		private _prevpos = [0,0,99999];
		{
			_x params ["_pos","_norm","_obj"];
			//–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º—ã–π –≤–µ—Ä—Ö–Ω–∏–π —Å–ª–æ–π (—ç—Ç–æ –∫—Ä—ã—à–∞ –ø–æ—Ç–æ–ª–∫–∞) 
			//! –Ω–µ –≤—Å–µ–≥–¥–∞. –ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ
			//if (_forEachIndex == 0) then {_prevpos = _pos;continue};
			
			//–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			if (isNullReference(_obj)) then {continue};

			//–µ—Å–ª–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			if (((_prevpos select 2)-(_pos select 2)) < ai_nav_minDistZ) then {
				continue
			};

			_nodes pushBack _pos;

			#ifdef AI_NAV_DEBUG_DRAW
			[_pos,[0,1,0],3,true] call ai_nav_debug_createObj;
			#endif

			_prevpos = _pos;
		} foreach _x;
	} foreach _hits;
	//ai_debug_decl(["generateRegionNodes time %1ms" arg ((tickTime - _t)*1000)toFixed 6] call ai_debugLog);

	#ifdef AI_NAV_DEBUG_DRAW
		ai_debug_loopDrawObjs = [];
		//debug draw region
		private _height =( _pos select 2)-3;
		private _corner1 = asltoatl[_regionStartX, _regionStartY, _height];
		private _corner2 = asltoatl[_regionEndX, _regionStartY, _height];
		private _corner3 = asltoatl[_regionEndX, _regionEndY, _height];
		private _corner4 = asltoatl[_regionStartX, _regionEndY, _height];
		
		// –†–∏—Å—É–µ–º 4 –ª–∏–Ω–∏–∏ –≥—Ä–∞–Ω–∏—Ü —Ä–µ–≥–∏–æ–Ω–∞
		private _loopRegion1 = struct_newp(LoopedObjectFunction,ai_nav_debug_drawNode arg [_corner1 arg _corner2 arg [1 arg 1 arg 0 arg 1] arg 20] arg null arg ai_debug_objs select 0);
		private _loopRegion2 = struct_newp(LoopedObjectFunction,ai_nav_debug_drawNode arg [_corner2 arg _corner3 arg [1 arg 1 arg 0 arg 1] arg 20] arg null arg ai_debug_objs select 0);
		private _loopRegion3 = struct_newp(LoopedObjectFunction,ai_nav_debug_drawNode arg [_corner3 arg _corner4 arg [1 arg 1 arg 0 arg 1] arg 20] arg null arg ai_debug_objs select 0);
		private _loopRegion4 = struct_newp(LoopedObjectFunction,ai_nav_debug_drawNode arg [_corner4 arg _corner1 arg [1 arg 1 arg 0 arg 1] arg 20] arg null arg ai_debug_objs select 0);
		
		ai_debug_loopDrawObjs pushback _loopRegion1;
		ai_debug_loopDrawObjs pushback _loopRegion2;
		ai_debug_loopDrawObjs pushback _loopRegion3;
		ai_debug_loopDrawObjs pushback _loopRegion4;
		
		{
			//! –æ—Ç–∫–ª—é—á–µ–Ω–æ
			//private _loop = struct_newp(LoopedObjectFunction,ai_nav_debug_drawNode arg [asltoatl _x arg asltoatl _x vectoradd vec3(0,0,10) arg null arg 15] arg null arg ai_debug_objs select 0);
			//ai_debug_loopDrawObjs pushback _loop;
		} foreach _nodes;
	#endif

	//–ø–æ—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–µ–π
	ai_debug_decl(private _tEdges = tickTime;)
	private _maxConnectionDist = ai_nav_gridStep * 2; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–≤—è–∑–∏ (–ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏)
	private _edgesList = [];
	_queryPos = [];

	
	private _connectionData = [];
	
	{
		private _currentNode = _x;
		private _currentIdx = _forEachIndex;
		
		// –ò—â–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —É–∑–ª—ã –¥–ª—è —Å–≤—è–∑–∏
		for "_i" from (_currentIdx + 1) to (count _nodes - 1) do {
			private _neighborNode = _nodes select _i;
			private _dist = _currentNode distance _neighborNode;
			
			// –ï—Å–ª–∏ —É–∑–µ–ª –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ —Å–≤—è–∑–∏
			if (
				_dist <= _maxConnectionDist
				//&& {([_currentNode, _neighborNode] call ai_nav_getSlopeAngleVec) <= ai_nav_maxSlope}
			) then {
				//–í—Ä–æ–¥–µ –∑–¥–µ—Å—å –±—ã—Å—Ç—Ä–µ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞
				if (([_currentNode, _neighborNode] call ai_nav_getSlopeAngleVec) > ai_nav_maxSlope) exitWith {};

				//–ø–æ z —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 1–º
				if (abs((_currentNode select 2) - (_neighborNode select 2)) > 1) exitWith {};

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
				_queryPos pushBack [
					_currentNode vectoradd vec3(0,0,0.4),
					_neighborNode vectoradd vec3(0,0,0.4),
					objNull,
					objNull,
					true,
					1,
					"VIEW",
					"GEOM"
				];
				
				_connectionData pushBack [_currentNode, _neighborNode, _dist];
				
			};
		};
	} forEach _nodes;
	
	
	_hits = lineIntersectsSurfaces [_queryPos];
	
	{
		if (count _x == 0) then {
			(_connectionData select _forEachIndex) params ["_currentNode","_neighborNode","_dist"];
			_edgesList pushBack ([_currentNode, _neighborNode, _dist]);
			#ifdef AI_NAV_DEBUG_DRAW
				
				private _loopEdge = struct_newp(LoopedObjectFunction,ai_nav_debug_drawNode arg [
					asltoatl _currentNode vectoradd vec3(0,0,0.15) arg 
					asltoatl _neighborNode vectoradd vec3(0.1,0,0.15) arg 
					[0 arg 0.5 arg 1 arg 0.8] arg 
					15
				] arg null arg ai_debug_objs select 0);
				ai_debug_loopDrawObjs pushback _loopEdge;
			#endif
		};
	} foreach _hits;
	
	//ai_debug_decl(["generateRegionEdges time %1ms, edges count: %2" arg ((tickTime - _tEdges)*1000)toFixed 6 arg count _edgesList] call ai_debugLog);
	
	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–≥–∏–æ–Ω, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
	if (_autoSave) then {
		[_regionKey, _nodes, _edgesList] call ai_nav_saveRegion;
	};
	
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á —Ä–µ–≥–∏–æ–Ω–∞
	_regionKey
};

ai_nav_getSlopeAngleVec = {
	params ["_pos1","_pos2"];
	private _dir = _pos2 vectorDiff _pos1;
	private _dirNorm = vectorNormalized _dir;

	// –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä (–ø—Ä–æ–µ–∫—Ü–∏—è –Ω–∞ XY –ø–ª–æ—Å–∫–æ—Å—Ç—å)
	private _horDir = [_dirNorm select 0, _dirNorm select 1, 0];
	private _horDirNorm = vectorNormalized _horDir;

	// –£–≥–æ–ª –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ —Å–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
	private _dotProduct = _dirNorm vectorDotProduct _horDirNorm;
	private _slopeAngle = acos _dotProduct; // –í –≥—Ä–∞–¥—É—Å–∞—Ö
	_slopeAngle
};

// ============================================================================
// –≠–¢–ê–ü 1: –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –†–ï–ì–ò–û–ù–ê
// ============================================================================

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
ai_nav_getRegionKey = {
	params ["_x","_y"];
	private _rx = floor((_x ) / ai_nav_regionSize);
	private _ry = floor((_y) / ai_nav_regionSize);
	format ["%1_%2", _rx, _ry]
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
ai_nav_saveRegion = {
	params ["_regionKey", "_nodes", "_edges"];
	
	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞
	private _regionData = createHashMap;
	_regionData set ["nodes", []];      // –ú–∞—Å—Å–∏–≤ ID —É–∑–ª–æ–≤
	_regionData set ["edges", _edges];  // –°–≤—è–∑–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
	_regionData set ["entrances", []];  // –ü–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏ (–ø–æ–∫–∞ –ø—É—Å—Ç—ã–µ)
	
	private _nodeIds = [];
	private _posToIdMap = createHashMap; // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —Å ID
	
	// –°–æ–∑–¥–∞–µ–º ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
	{
		private _nodeId = call ai_nav_generateNodeId;
		private _nodeData = createHashMap;
		_nodeData set ["pos", _x];
		_nodeData set ["region", _regionKey];
		_nodeData set ["neighbors", []]; // –°–æ—Å–µ–¥–Ω–∏–µ —É–∑–ª—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ
		
		ai_nav_nodes set [_nodeId, _nodeData];
		_nodeIds pushBack _nodeId;
		
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏ –∫ ID
		_posToIdMap set [str _x, _nodeId];
		
	} forEach _nodes;
	
	_regionData set ["nodes", _nodeIds];
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∏ –≤–Ω—É—Ç—Ä–∏ —Ä–µ–≥–∏–æ–Ω–∞ –≤ ai_nav_adjacency
	{
		_x params ["_pos1", "_pos2", "_cost"];
		
		private _nodeId1 = _posToIdMap get (str _pos1);
		private _nodeId2 = _posToIdMap get (str _pos2);
		
		// –î–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏
		if (!isNil "_nodeId1" && !isNil "_nodeId2") then {
			// –°–≤—è–∑—å 1 -> 2
			if (!(_nodeId1 in ai_nav_adjacency)) then {
				ai_nav_adjacency set [_nodeId1, []];
			};
			private _adjList1 = ai_nav_adjacency get _nodeId1;
			_adjList1 pushBackUnique [_nodeId2, _cost];
			
			// –°–≤—è–∑—å 2 -> 1
			if (!(_nodeId2 in ai_nav_adjacency)) then {
				ai_nav_adjacency set [_nodeId2, []];
			};
			private _adjList2 = ai_nav_adjacency get _nodeId2;
			_adjList2 pushBackUnique [_nodeId1, _cost];
		};
	} forEach _edges;
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–≥–∏–æ–Ω
	ai_nav_regions set [_regionKey, _regionData];
	
	ai_debug_decl(["Region %1 saved: %2 nodes, %3 edges" arg _regionKey arg count _nodeIds arg count _edges] call ai_debugLog);
	
	_regionKey
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞
ai_nav_getRegion = {
	params ["_regionKey"];
	ai_nav_regions getOrDefault [_regionKey, nil]
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞
ai_nav_hasRegion = {
	params ["_pos"];
	private _key = _pos call ai_nav_getRegionKey;
	_key in ai_nav_regions
};

// ============================================================================
// –≠–¢–ê–ü 2: –ì–ï–ù–ï–†–ê–¶–ò–Ø –ù–ï–°–ö–û–õ–¨–ö–ò–• –†–ï–ì–ò–û–ù–û–í
// ============================================================================

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
ai_nav_generateRegions = {
	params ["_centerPos", "_radius"];
	
	ai_debug_decl(private _tTotal = tickTime;)
	
	private _regionRadius = ceil(_radius / ai_nav_regionSize);
	private _centerRegionX = floor((_centerPos select 0) / ai_nav_regionSize);
	private _centerRegionY = floor((_centerPos select 1) / ai_nav_regionSize);
	
	private _generatedRegions = [];
	private _skippedRegions = 0;
	
	for "_rx" from (_centerRegionX - _regionRadius) to (_centerRegionX + _regionRadius) do {
		for "_ry" from (_centerRegionY - _regionRadius) to (_centerRegionY + _regionRadius) do {
			private _regionPos = [
				_rx * ai_nav_regionSize + ai_nav_regionSize/2,
				_ry * ai_nav_regionSize + ai_nav_regionSize/2,
				_centerPos select 2
			];
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–¥–∏—É—Å–µ)
			if ((_regionPos distance2D _centerPos) <= _radius) then {
				private _regionKey = [_regionPos] call ai_nav_generateRegionNodes;
				
				// –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–Ω–µ –±—ã–ª –ø—É—Å—Ç—ã–º)
				if (!isNil "_regionKey" && {_regionKey in ai_nav_regions}) then {
					_generatedRegions pushBack _regionKey;
				} else {
					_skippedRegions = _skippedRegions + 1;
				};
			};
		};
	};
	
	// ai_debug_decl([
	// 	"Generated %1 regions in %2ms (skipped %3 empty regions)" arg 
	// 	count _generatedRegions arg 
	// 	((tickTime - _tTotal)*1000)toFixed 2 arg 
	// 	_skippedRegions
	// ] call ai_debugLog);
	
	_generatedRegions
};

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
ai_nav_clearAllRegions = {
	ai_nav_regions = createHashMap;
	ai_nav_nodes = createHashMap;
	ai_nav_adjacency = createHashMap;
	ai_nav_nodeIdCounter = 0;
	
	// –û—á–∏—â–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
	call ai_nav_clearDebugObjects;
	
	ai_debug_decl(["All regions cleared"] call ai_debugLog);
};

// ============================================================================
// –≠–¢–ê–ü 3: –ü–ï–†–ï–•–û–î–ù–´–ï –¢–û–ß–ö–ò –ú–ï–ñ–î–£ –†–ï–ì–ò–û–ù–ê–ú–ò (ENTRANCE POINTS)
// ============================================================================

// –ù–∞–π—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
ai_nav_buildEntrancePoints = {
	ai_debug_decl(private _tTotal = tickTime;)
	
	private _totalEntrances = 0;
	
	// –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –∏—â–µ–º –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏
	{
		private _regionKey = _x;
		private _entrances = [_regionKey] call ai_nav_findEntrancePoints;
		_totalEntrances = _totalEntrances + count _entrances;
	} forEach (keys ai_nav_regions);
	
	ai_debug_decl([
		"Built entrance points: %1 total entrances in %2ms" arg 
		_totalEntrances arg 
		((tickTime - _tTotal)*1000)toFixed 2
	] call ai_debugLog);
	
	_totalEntrances
};

// –ù–∞–π—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
ai_nav_findEntrancePoints = {
	params ["_regionKey"];
	
	private _regionData = ai_nav_regions get _regionKey;
	if (isNil "_regionData") exitWith {
		ai_debug_decl(["Region %1 not found" arg _regionKey] call ai_debugLog);
		[]
	};
	
	private _nodeIds = _regionData get "nodes";
	private _entrances = createHashMap; // neighborRegionKey -> [nodeIds]
	
	// –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ —Å–æ—Å–µ–¥–Ω–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
	_regionKey splitString "_" params ["_rx", "_ry"];
	_rx = parseNumber _rx;
	_ry = parseNumber _ry;
	
	// 8 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–æ—Å–µ–¥–Ω–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ (N, S, E, W, NE, NW, SE, SW)
	private _neighborOffsets = [
		[0, 1],   // North
		[0, -1],  // South
		[1, 0],   // East
		[-1, 0],  // West
		[1, 1],   // NorthEast
		[-1, 1],  // NorthWest
		[1, -1],  // SouthEast
		[-1, -1]  // SouthWest
	];

	// –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ –≤ —Ä–µ–≥–∏–æ–Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –≥—Ä–∞–Ω–∏—á–Ω—ã–º
	{
		private _nodeId = _x;
		private _nodeData = ai_nav_nodes get _nodeId;
		private _nodePos = _nodeData get "pos";
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ—Å–µ–¥–Ω–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
		{
			_x params ["_dx", "_dy"];
			private _neighborKey = format ["%1_%2", _rx + _dx, _ry + _dy];
			
			// –ï—Å–ª–∏ —Å–æ—Å–µ–¥–Ω–∏–π —Ä–µ–≥–∏–æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
			if (_neighborKey in ai_nav_regions) then {
				private _neighborData = ai_nav_regions get _neighborKey;
				private _neighborNodeIds = _neighborData get "nodes";
				
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑—å —Å —É–∑–ª–∞–º–∏ —Å–æ—Å–µ–¥–Ω–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
				{
					private _neighborNodeId = _x;
					private _neighborNodeData = ai_nav_nodes get _neighborNodeId;
					private _neighborPos = _neighborNodeData get "pos";
					
					// –ï—Å–ª–∏ —É–∑–ª—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–æ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Å–≤—è–∑–∏)
					private _dist = _nodePos distance _neighborPos;
					if (_dist <= (ai_nav_gridStep * 2)) then {
						// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è						
						private _intersections = lineIntersectsSurfaces [
							_nodePos vectoradd vec3(0,0,0.4),
							_neighborPos vectoradd vec3(0,0,0.4),
							objNull,
							objNull,
							true,
							1,
							"VIEW",
							"GEOM"
						];
						
						if (count _intersections == 0) then {
							// –≠—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞!
							if (!(_neighborKey in _entrances)) then {
								_entrances set [_neighborKey, []];
							};
							
							private _entranceList = _entrances get _neighborKey;
							
							// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
							if (!(_nodeId in _entranceList)) then {
								_entranceList pushBack _nodeId;
								
								// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –≤ adjacency
								if (!(_nodeId in ai_nav_adjacency)) then {
									ai_nav_adjacency set [_nodeId, []];
								};
								private _adjList = ai_nav_adjacency get _nodeId;
								_adjList pushBackUnique [_neighborNodeId, _dist];
								
								#ifdef AI_NAV_DEBUG_DRAW
								// –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–π —Ç–æ—á–∫–∏ (–∫—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏)
								private _loopEntrance = struct_newp(LoopedObjectFunction,
									ai_nav_debug_drawNode arg [
										asltoatl _nodePos vectoradd vec3(0,0,0.2) arg 
										asltoatl _neighborPos vectoradd vec3(0,0,0.2) arg 
										[1 arg 0 arg 0 arg 1] arg 
										25
									] arg 
									null arg 
									ai_debug_objs select 0
								);
								ai_debug_loopDrawObjs pushback _loopEntrance;
								#endif
							};
						};
						
					};
				} forEach _neighborNodeIds;
			};
		} forEach _neighborOffsets;
	} forEach _nodeIds;
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏ –≤ —Ä–µ–≥–∏–æ–Ω
	_regionData set ["entrances", _entrances];
	
	ai_debug_decl([
		"Region %1: found %2 entrance connections" arg 
		_regionKey arg 
		count (keys _entrances)
	] call ai_debugLog);
	
	_entrances
};

// ============================================================================
// –≠–¢–ê–ü 4: A* –ê–õ–ì–û–†–ò–¢–ú –ü–û–ò–°–ö–ê –ü–£–¢–ò
// ============================================================================

// –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π —É–∑–µ–ª –∫ –ø–æ–∑–∏—Ü–∏–∏
ai_nav_findNearestNode = {
	params ["_pos", ["_maxDistance", 50]];
	
	private _regionKey = _pos call ai_nav_getRegionKey;
	private _regionData = ai_nav_regions get _regionKey;
	
	// –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—â–µ–º –≤ –±–ª–∏–∂–∞–π—à–∏—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö
	if (isNil "_regionData") then {
		private _bestNode = -1;
		private _bestDist = 999999;
		
		{
			private _nodeData = _y;
			private _nodePos = _nodeData get "pos";
			private _dist = _pos distance _nodePos;
			
			if (_dist < _bestDist && _dist <= _maxDistance) then {
				_bestDist = _dist;
				_bestNode = _x;
			};
		} forEach ai_nav_nodes;
		
		if (_bestNode == -1) exitWith {-1};
		_bestNode
	};
	
	// –ò—â–µ–º –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–≥–∏–æ–Ω–µ
	private _nodeIds = _regionData get "nodes";
	private _bestNode = -1;
	private _bestDist = 999999;
	
	{
		private _nodeId = _x;
		private _nodeData = ai_nav_nodes get _nodeId;
		private _nodePos = _nodeData get "pos";
		private _dist = _pos distance _nodePos;
		
		if (_dist < _bestDist) then {
			_bestDist = _dist;
			_bestNode = _nodeId;
		};
	} forEach _nodeIds;
	
	if (_bestDist > _maxDistance) then {
		-1
	} else {
		_bestNode
	}
};

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Ç—å –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π
ai_nav_reconstructPath = {
	params ["_cameFrom", "_current"];
	
	private _path = [_current];
	
	while {_current in _cameFrom} do {
		_current = _cameFrom get _current;
		_path pushBack _current;
	};
	
	reverse _path;
	_path
};

// –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ø—Ä—è–º–æ–π)
ai_nav_heuristic = {
	params ["_nodeId1", "_nodeId2"];
	
	private _pos1 = (ai_nav_nodes get _nodeId1) get "pos";
	private _pos2 = (ai_nav_nodes get _nodeId2) get "pos";
	
	_pos1 distance _pos2
};

// –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å–µ–¥–µ–π —É–∑–ª–∞
ai_nav_getNeighbors = {
	params ["_nodeId"];
	
	private _neighbors = ai_nav_adjacency getOrDefault [_nodeId, []];
	_neighbors
};

// A* –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —É–∑–ª–∞–º–∏
ai_nav_findPathNodes = {
	params ["_startNodeId", "_goalNodeId"];
	FHEADER;
	
	if (_startNodeId == -1 || _goalNodeId == -1) exitWith {
		ai_debug_decl(["Invalid node IDs: start=%1, goal=%2" arg _startNodeId arg _goalNodeId] call ai_debugLog);
		[]
	};
	
	ai_debug_decl(private _tStart = tickTime;)
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
	private _openSet = [_startNodeId];
	private _cameFrom = createHashMap;
	
	private _gScore = createHashMap;
	_gScore set [_startNodeId, 0];
	
	private _fScore = createHashMap;
	_fScore set [_startNodeId, [_startNodeId, _goalNodeId] call ai_nav_heuristic];
	
	private _iterations = 0;
	private _maxIterations = 10000;
	
	while {count _openSet > 0 && _iterations < _maxIterations} do {
		_iterations = _iterations + 1;
		
		// –ù–∞–π—Ç–∏ —É–∑–µ–ª —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º fScore
		private _current = _openSet select 0;
		private _minF = _fScore getOrDefault [_current, 999999];
		
		{
			private _f = _fScore getOrDefault [_x, 999999];
			if (_f < _minF) then {
				_minF = _f;
				_current = _x;
			};
		} forEach _openSet;
		
		// –î–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏
		if (_current == _goalNodeId) exitWith {
			private _path = [_cameFrom, _current] call ai_nav_reconstructPath;
			
			ai_debug_decl([
				"Path found: %1 nodes, %2 iterations, %3ms" arg 
				count _path arg 
				_iterations arg 
				((tickTime - _tStart)*1000)toFixed 2
			] call ai_debugLog);
			
			RETURN(_path);
		};
		
		// –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–∑ openSet
		_openSet deleteAt (_openSet find _current);
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–µ–π
		private _neighbors = [_current] call ai_nav_getNeighbors;
		
		{
			_x params ["_neighborId", "_cost"];
			
			private _tentativeGScore = (_gScore getOrDefault [_current, 999999]) + _cost;
			
			if (_tentativeGScore < (_gScore getOrDefault [_neighborId, 999999])) then {
				_cameFrom set [_neighborId, _current];
				_gScore set [_neighborId, _tentativeGScore];
				_fScore set [_neighborId, _tentativeGScore + ([_neighborId, _goalNodeId] call ai_nav_heuristic)];
				
				if (!(_neighborId in _openSet)) then {
					_openSet pushBack _neighborId;
				};
			};
		} forEach _neighbors;
	};
	
	ai_debug_decl([
		"Path not found after %1 iterations (max: %2)" arg 
		_iterations arg 
		_maxIterations
	] call ai_debugLog);
	
	[]
};

// –ù–∞–π—Ç–∏ –ø—É—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–∑–∏—Ü–∏—è–º–∏
ai_nav_findPath = {
	params ["_startPos", "_endPos"];
	
	ai_debug_decl(["Finding path from %1 to %2" arg _startPos arg _endPos] call ai_debugLog);
	
	// –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ —É–∑–ª—ã
	private _startNode = [_startPos] call ai_nav_findNearestNode;
	private _endNode = [_endPos] call ai_nav_findNearestNode;
	
	if (_startNode == -1) exitWith {
		ai_debug_decl(["No start node found near %1" arg _startPos] call ai_debugLog);
		[]
	};
	
	if (_endNode == -1) exitWith {
		ai_debug_decl(["No end node found near %1" arg _endPos] call ai_debugLog);
		[]
	};
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º A*
	private _pathNodes = [_startNode, _endNode] call ai_nav_findPathNodes;
	
	if (count _pathNodes == 0) exitWith {[]};
	
	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —É–∑–ª—ã –≤ –ø–æ–∑–∏—Ü–∏–∏
	private _pathPositions = [];
	{
		private _nodeData = ai_nav_nodes get _x;
		private _pos = _nodeData get "pos";
		_pathPositions pushBack _pos;
	} forEach _pathNodes;
	
	_pathPositions
};

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
// ============================================================================

// –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤–æ–∫—Ä—É–≥ –ø–æ–∑–∏—Ü–∏–∏
ai_nav_quickInit = {
	params ["_pos", ["_radius", 50]];
	
	// –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
	call ai_nav_clearAllRegions;
	
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏–æ–Ω—ã
	private _regions = [_pos, _radius] call ai_nav_generateRegions;
	
	["Navigation initialized: %1 regions generated around %2" arg count _regions arg _pos] call ai_debugLog;
	
	//–°—Ç—Ä–æ–∏–º –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏ –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏
	private _entrances = call ai_nav_buildEntrancePoints;
	
	["Built %1 entrance connections between regions" arg _entrances] call ai_debugLog;
	
	_regions
};

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
ai_nav_getStats = {
	private _totalNodes = count (keys ai_nav_nodes);
	private _totalRegions = count (keys ai_nav_regions);
	private _totalEdges = 0;
	
	{
		private _regionData = _y;
		_totalEdges = _totalEdges + count (_regionData get "edges");
	} forEach ai_nav_regions;
	
	private _stats = createHashMap;
	_stats set ["regions", _totalRegions];
	_stats set ["nodes", _totalNodes];
	_stats set ["edges", _totalEdges];
	
	_stats
};

// ============================================================================
// –≠–¢–ê–ü 5: –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
// ============================================================================

// –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
ai_nav_debugDrawPath = {
	params ["_path", ["_color", [1,0,1,1]], ["_width", 30]];
	
	if (count _path < 2) exitWith {
		ai_debug_decl(["Path too short to draw: %1 nodes" arg count _path] call ai_debugLog);
	};
	
	private _pathLoops = [];
	
	for "_i" from 0 to (count _path - 2) do {
		private _p1 = _path select _i;
		private _p2 = _path select (_i + 1);
		
		private _loop = struct_newp(LoopedObjectFunction,
			ai_nav_debug_drawNode arg [
				asltoatl _p1 vectoradd vec3(0,0,0.3) arg 
				asltoatl _p2 vectoradd vec3(0,0,0.3) arg 
				_color arg 
				_width
			] arg 
			null arg 
			ai_debug_objsPath select 0
		);
		
		_pathLoops pushBack _loop;
	};
	
	ai_debug_decl(["Draw path with %1 segments" arg count _pathLoops] call ai_debugLog);
	
	_pathLoops
};

// –¢–µ—Å—Ç: –Ω–∞–π—Ç–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–∑–∏—Ü–∏—è–º–∏
ai_nav_testPath = {
	params ["_startPos", "_endPos"];
	
	// –ù–∞—Ö–æ–¥–∏–º –ø—É—Ç—å
	private _path = [_startPos, _endPos] call ai_nav_findPath;
	
	if (count _path == 0) exitWith {
		["No path found between positions!"] call ai_debugLog;
		[]
	};
	
	// –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Ç—å (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç)
	deleteVehicle ai_debug_objsPath;
	ai_debug_objsPath = [];

	// –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç –∏ –∫–æ–Ω–µ—Ü (–∑–µ–ª–µ–Ω—ã–π –∏ –∫—Ä–∞—Å–Ω—ã–π –º–∞—Ä–∫–µ—Ä—ã)
	[_startPos, [0,1,0], 5, true,ai_debug_objsPath] call ai_nav_debug_createObj; // –ó–µ–ª–µ–Ω—ã–π —Å—Ç–∞—Ä—Ç
	[_endPos, [1,0,0], 5, true,ai_debug_objsPath] call ai_nav_debug_createObj;   // –ö—Ä–∞—Å–Ω—ã–π –∫–æ–Ω–µ—Ü
	
	private _loops = [_path, [1,0,1,1], 30] call ai_nav_debugDrawPath;
	
	["Path found: %1 waypoints, distance: %2m" arg count _path arg (_startPos distance _endPos)toFixed 2] call ai_debugLog;
	
	_path
};

// ============================================================================
// DEBUG –§–£–ù–ö–¶–ò–ò
// ============================================================================

ai_nav_debug_drawNode = {
	params ["_pos","_pos2",["_color",[1,0,0,1]],["_wdt",1]];
	drawLine3D [_pos, _pos2, _color,_wdt];
};